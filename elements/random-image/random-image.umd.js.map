{"version":3,"file":"random-image.umd.js","sources":["random-image.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\n/**\n`random-image`\nElement to show random image from a given group.\n\n* @demo demo/index.html\n*/\nclass RandomImage extends LitElement {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        .is-circle {\n          border: 1px solid grey;\n          border-radius: 50%;\n          box-shadow: 0px 5px 10px #ccc;\n        }\n      `\n    ];\n  }\n  constructor() {\n    super();\n    this.mode = \"\";\n    this.imagesList = [];\n    import(\"@polymer/iron-image/iron-image.js\");\n  }\n  render() {\n    return html`\n      <iron-image\n        style=\"width:200px; height:200px;\"\n        class=\"${this.mode}\"\n        sizing=\"contain\"\n        src=\"${this._imgSrc}\"\n        title=\"${this._imgTitle}\"\n      ></iron-image>\n    `;\n  }\n\n  static get tag() {\n    return \"random-image\";\n  }\n\n  static get properties() {\n    return {\n      mode: {\n        type: String\n      },\n      _imgSrc: {\n        type: String\n      },\n      _imgTitle: {\n        type: String\n      },\n      imagesList: {\n        type: Array,\n        attribute: \"images-list\"\n      }\n    };\n  }\n\n  _pickRandomProperty(obj) {\n    var result;\n    var count = 0;\n    for (var prop in obj) if (Math.random() < 1 / ++count) result = prop;\n    return result;\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"imagesList\") {\n        let randomPos = this._pickRandomProperty(this.imagesList);\n        this._imgSrc = this.imagesList[randomPos].path;\n        this._imgTitle = this.imagesList[randomPos].title;\n      }\n      let notifiedProps = [\"imagesList\", \"mode\"];\n      if (notifiedProps.includes(propName)) {\n        // notify\n        let eventName = `${propName\n          .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\")\n          .toLowerCase()}-changed`;\n        this.dispatchEvent(\n          new CustomEvent(eventName, {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n    });\n  }\n}\nwindow.customElements.define(RandomImage.tag, RandomImage);\nexport { RandomImage };\n"],"names":["RandomImage","mode","imagesList","LitElement","css","html","this","_imgSrc","_imgTitle","obj","result","count","prop","Math","random","changedProperties","forEach","oldValue","propName","randomPos","_this2","_pickRandomProperty","path","title","includes","eventName","replace","toLowerCase","dispatchEvent","CustomEvent","detail","value","type","String","Array","attribute","window","customElements","define","tag"],"mappings":"qgDAOMA,yKAoBGC,KAAO,KACPC,WAAa,UACX,mRAtBeC,2DAKf,CACLC,2DAmBKC,WAGMC,KAAKL,KAEPK,KAAKC,QACHD,KAAKE,uDA2BAC,OACdC,EACAC,EAAQ,MACP,IAAIC,KAAQH,EAASI,KAAKC,SAAW,IAAMH,IAAOD,EAASE,UACzDF,kCAEDK,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,MACnB,cAAZA,EAA0B,KACxBC,EAAYC,EAAKC,oBAAoBD,EAAKlB,YAC9CkB,EAAKb,QAAUa,EAAKlB,WAAWiB,GAAWG,KAC1CF,EAAKZ,UAAYY,EAAKlB,WAAWiB,GAAWI,SAE1B,CAAC,aAAc,QACjBC,SAASN,GAAW,KAEhCO,YAAeP,EAChBQ,QAAQ,+BAAgC,SACxCC,0BACHP,EAAKQ,cACH,IAAIC,YAAYJ,EAAW,CACzBK,OAAQ,CACNC,MAAOX,EAAKF,8CA3Cf,wDAIA,CACLjB,KAAM,CACJ+B,KAAMC,QAER1B,QAAS,CACPyB,KAAMC,QAERzB,UAAW,CACTwB,KAAMC,QAER/B,WAAY,CACV8B,KAAME,MACNC,UAAW,yBAmCnBC,OAAOC,eAAeC,OAAOtC,EAAYuC,IAAKvC"}