{"version":3,"file":"wc-autoload.umd.js","sources":["wc-autoload.umd.js"],"sourcesContent":["/**\n * Copyright 2020 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\n\n/**\n * `wc-autoload`\n * `automatically load new tags in the dom`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @demo demo/index.html\n * @element wc-autoload\n */\nclass WcAutoload extends HTMLElement {\n  \n  // render function\n  get html() {\n    return `\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n</style>\n<slot></slot>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    let props = {};\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  /**\n   * This is a convention, not the standard\n   */\n  static get tag() {\n    return \"wc-autoload\";\n  }\n  /**\n   * object life cycle\n   */\n  constructor(delayRender = false) {\n    super();\n    \n    // map our imported properties json to real props on the element\n    // @notice static getter of properties is built via tooling\n    // to edit modify src/wc-autoload-properties.json\n    let obj = WcAutoload.properties;\n    for (let p in obj) {\n      if (obj.hasOwnProperty(p)) {\n        if (this.hasAttribute(p)) {\n          this[p] = this.getAttribute(p);\n        }\n        else {\n          this.setAttribute(p, obj[p].value);\n          this[p] = obj[p].value;\n        }\n      }\n    }\n    // create a template element for processing shadowRoot\n    this.template = document.createElement(\"template\");\n    // create a shadowRoot\n    this.attachShadow({ mode: \"open\" });\n    // optional delay in rendering, otherwise it always happens\n    if (!delayRender) {\n      this.render();\n    }\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleElement(this);\n    }\n    \n  }\n  /**\n   * Render / rerender the shadowRoot\n   */\n  render() {\n    this.shadowRoot.innerHTML = null;\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n  }\n  /**\n   * attributes to notice changes to\n   */\n  static get observedAttributes() {\n    return [];\n  }\n  /**\n   * callback when any observed attribute changes\n   */\n  attributeChangedCallback(attr, oldValue, newValue) {\n\n  }\n  \n}\nwindow.customElements.define(WcAutoload.tag, WcAutoload);\nexport { WcAutoload };\n"],"names":["WcAutoload","delayRender","obj","properties","p","hasOwnProperty","_this","hasAttribute","getAttribute","setAttribute","value","template","document","createElement","attachShadow","mode","render","HTMLElement","props","Object","assign","window","ShadyCSS","styleElement","this","shadowRoot","innerHTML","html","prepareTemplate","tag","appendChild","content","cloneNode","attr","oldValue","newValue","customElements","define"],"mappings":"khEAeMA,iCAkCQC,8LAMNC,EAAMF,EAAWG,eAChB,IAAIC,KAAKF,EACRA,EAAIG,eAAeD,KACjBE,EAAKC,aAAaH,KACfA,GAAKE,EAAKE,aAAaJ,MAGvBK,aAAaL,EAAGF,EAAIE,GAAGM,SACvBN,GAAKF,EAAIE,GAAGM,iBAKlBC,SAAWC,SAASC,cAAc,cAElCC,aAAa,CAAEC,KAAM,SAErBd,KACEe,yPA1DcC,yMAkBjBC,EAAQ,sCAEVA,EAAQC,OAAOC,OAAOF,8BAEjBA,oCAOA,iEAoCHG,OAAOC,UACTD,OAAOC,SAASC,aAAaC,4CAQ1BC,WAAWC,UAAY,UACvBf,SAASe,UAAYF,KAAKG,KAE3BN,OAAOC,UACTD,OAAOC,SAASM,gBAAgBJ,KAAKb,SAAUa,KAAKK,UAEjDJ,WAAWK,YAAYN,KAAKb,SAASoB,QAAQC,WAAU,qDAWrCC,EAAMC,EAAUC,uDALhC,YAUXd,OAAOe,eAAeC,OAAOrC,EAAW6B,IAAK7B"}