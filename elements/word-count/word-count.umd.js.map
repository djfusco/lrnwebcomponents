{"version":3,"file":"word-count.umd.js","sources":["word-count.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\n/**\n * `word-count`\n * `Count the words on whatever this wraps`\n *\n * @demo demo/index.html\n * @element word-count\n */\nclass WordCount extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        :host:after {\n          content: attr(words-text);\n          position: var(--word-count-position, relative);\n          display: var(--word-count-display, flex);\n          flex-direction: var(--word-count-flex-direction, row-reverse);\n          margin: var(--word-count-margin, 12px);\n          font-size: var(--word-count-font-size, 10px);\n          transition: var(--word-count-transition, 0.3s font-size, color ease);\n          line-height: var(--word-count-line-height, 16px);\n          color: var(--word-count-color, #888888);\n        }\n        :host(:hover):after,\n        :host(:focus):after,\n        :host(:active):after {\n          font-size: var(--word-count-font-size-hover, 12px);\n          font-weight: var(--word-count-font-weight-hover, bold);\n          color: var(--word-count-color-hover, #000000);\n        }\n        .screen-reader-text {\n          border: 0;\n          clip: rect(1px, 1px, 1px, 1px);\n          clip-path: inset(50%);\n          height: 1px;\n          margin: -1px;\n          width: 1px;\n          overflow: hidden;\n          position: absolute !important;\n          word-wrap: normal !important;\n        }\n      `\n    ];\n  }\n  render() {\n    return html`\n      <slot></slot>\n      <div class=\"screen-reader-text\">${this.wordsPrefix} ${this.words}</div>\n    `;\n  }\n  static get tag() {\n    return \"word-count\";\n  }\n  constructor() {\n    super();\n    this.wordsPrefix = \"Word count:\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.__observer = new MutationObserver(this._updateWords.bind(this));\n    this.__observer.observe(this, {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n  disconnectedCallback() {\n    this.__observer.disconnect();\n    super.disconnectedCallback();\n  }\n  update(changedProperties) {\n    super.update(changedProperties);\n    if (\n      changedProperties.has(\"wordsPrefix\") ||\n      changedProperties.has(\"words\")\n    ) {\n      this.setAttribute(\"words-text\", `${this.wordsPrefix} ${this.words}`);\n    }\n  }\n  static get properties() {\n    return {\n      words: { type: Number },\n      wordsPrefix: { type: String }\n    };\n  }\n  /**\n   * Update words based on data in the slot.\n   */\n  _updateWords(mutations) {\n    if (this.textContent !== \"\") {\n      this.words = parseInt(this.textContent.split(/\\s+/g).length - 1);\n    } else {\n      this.words = 0;\n    }\n  }\n}\nwindow.customElements.define(WordCount.tag, WordCount);\nexport { WordCount };\n"],"names":["WordCount","wordsPrefix","LitElement","html","this","words","css","__observer","MutationObserver","_updateWords","bind","observe","attributes","characterData","childList","subtree","disconnect","changedProperties","has","setAttribute","mutations","textContent","parseInt","split","length","type","Number","String","window","customElements","define","tag"],"mappings":"mtFAQMA,yKAkDGC,YAAc,4PAlDCC,yDAwCbC,WAE6BC,KAAKH,YAAeG,KAAKC,8CAxCtD,CACLC,8CA2CK,2HAQFC,WAAa,IAAIC,iBAAiBJ,KAAKK,aAAaC,KAAKN,YACzDG,WAAWI,QAAQP,KAAM,CAC5BQ,YAAY,EACZC,eAAe,EACfC,WAAW,EACXC,SAAS,wDAINR,WAAWS,qGAGXC,6CACQA,IAEXA,EAAkBC,IAAI,gBACtBD,EAAkBC,IAAI,gBAEjBC,aAAa,uBAAiBf,KAAKH,wBAAeG,KAAKC,6CAYnDe,GACc,KAArBhB,KAAKiB,iBACFhB,MAAQiB,SAASlB,KAAKiB,YAAYE,MAAM,QAAQC,OAAS,QAEzDnB,MAAQ,6CAZR,CACLA,MAAO,CAAEoB,KAAMC,QACfzB,YAAa,CAAEwB,KAAME,kBAc3BC,OAAOC,eAAeC,OAAO9B,EAAU+B,IAAK/B"}