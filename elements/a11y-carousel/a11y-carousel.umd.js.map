{"version":3,"file":"a11y-carousel.umd.js","sources":["a11y-carousel.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\n/**\n * `a11y-carousel`\n * Layers images over each other with a slider interface to compare them\n * @demo demo/index.html\n * @element a11y-carousel\n */\nclass a11yCarousel extends SchemaBehaviors(LitElement) {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: inline-flex;\n          width: 100%;\n        }\n        :host > div,\n        :host #container,\n        :host #top {\n          width: 100%;\n        }\n        :host #container {\n          background-size: cover;\n          overflow: visible;\n        }\n        :host #top {\n          background-size: auto 100%;\n          overflow: hidden;\n        }\n        :host #slider {\n          width: calc(100% + 30px);\n          margin-left: -15px;\n        }\n      `\n    ];\n  }\n  constructor() {\n    super();\n    this.opacity = false;\n    import(\"@lrnwebcomponents/user-action/user-action.js\");\n    import(\"@polymer/iron-image/iron-image.js\");\n    import(\"@polymer/paper-slider/paper-slider.js\");\n  }\n  render() {\n    return html`\n      <div>\n        <h2>${this.title}</h2>\n        <div id=\"container\" style=\"background-image: url(${this.bottomSrc});\">\n          <div id=\"top\" style=\"background-image: url(${this.topSrc});\"></div>\n        </div>\n        <user-action track=\"click\">\n          <paper-slider id=\"slider\" value=\"50\"></paper-slider>\n        </user-action>\n        <div></div>\n      </div>\n    `;\n  }\n\n  static get tag() {\n    return \"a11y-carousel\";\n  }\n\n  static get properties() {\n    return {\n      ...super.properties,\n      /**\n       * Title\n       */\n      title: {\n        type: String\n      },\n      /**\n       * src for top image\n       */\n      topSrc: {\n        type: String,\n        attribute: \"top-src\"\n      },\n      /**\n       * mode for the slider: wipe\n       */\n      opacity: {\n        type: Boolean\n      },\n      /**\n       * src for top image\n       */\n      bottomSrc: {\n        type: String,\n        attribute: \"bottom-src\"\n      }\n    };\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if ([\"topSrc\"].includes(propName)) {\n        this._updateAspect();\n        this._slide();\n      }\n    });\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Image comparison\",\n        description:\n          \"Simple element to allow one image to swipe over top of the other.\",\n        icon: \"image:compare\",\n        color: \"orange\",\n        groups: [\"Image\", \"Media\"],\n        handles: [\n          {\n            type: \"image\",\n            source: \"bottomSrc\",\n            source2: \"topSrc\",\n            title: \"title\"\n          }\n        ],\n        meta: {\n          author: \"ELMS:LN\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"opacity\",\n            title: \"Slider Behavior\",\n            description:\n              \"Do you want the slider to wipe the top image across the bottom one (default), or to adjust the opacity of the top image?\",\n            inputMethod: \"select\",\n            options: {\n              false: \"wipe across\",\n              true: \"adjust opacity\"\n            },\n            icon: \"image:compare\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"bottomSrc\",\n            title: \"Bottom image\",\n            description: \"The base image to swipe over\",\n            inputMethod: \"haxupload\",\n            validationType: \"url\"\n          },\n          {\n            property: \"topSrc\",\n            title: \"Top image\",\n            description: \"The top image that swipes over\",\n            inputMethod: \"haxupload\",\n            validationType: \"url\"\n          }\n        ],\n        advanced: []\n      }\n    };\n  }\n  firstUpdated() {\n    this.shadowRoot\n      .querySelector(\"#slider\")\n      .addEventListener(\"immediate-value-changed\", e => {\n        this._slide();\n      });\n  }\n  /**\n   * updates the slider\n   */\n  _slide() {\n    if (this.opacity === false) {\n      this.shadowRoot.querySelector(\"#top\").style.width =\n        this.shadowRoot.querySelector(\"#slider\").immediateValue + \"%\";\n    } else {\n      this.shadowRoot.querySelector(\"#top\").style.opacity =\n        this.shadowRoot.querySelector(\"#slider\").immediateValue / 100;\n    }\n  }\n  /**\n   * updates the aspect ratio\n   */\n  _updateAspect() {\n    let img = document.createElement(\"img\"),\n      el = this.shadowRoot.querySelector(\"#top\"),\n      getAspect = img => {\n        el.style.paddingTop = (img.height * 100) / img.width + \"%\";\n      };\n    this.__aspect = \"75\";\n    img.setAttribute(\"src\", this.topSrc);\n    if (img.height !== undefined && img.height > 0) {\n      getAspect(img);\n    } else {\n      img.addEventListener(\"load\", function() {\n        getAspect(img);\n      });\n    }\n  }\n}\nwindow.customElements.define(a11yCarousel.tag, a11yCarousel);\nexport { a11yCarousel };\n"],"names":["a11yCarousel","opacity","SchemaBehaviors","LitElement","css","html","this","title","bottomSrc","topSrc","changedProperties","forEach","oldValue","propName","includes","_this2","_updateAspect","_slide","shadowRoot","querySelector","addEventListener","e","_this3","style","width","immediateValue","img","document","createElement","el","getAspect","paddingTop","height","__aspect","setAttribute","undefined","type","String","attribute","Boolean","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","source","source2","meta","author","settings","quick","property","inputMethod","options","configure","validationType","advanced","window","customElements","define","tag"],"mappings":"svFAQMA,yKAiCGC,SAAU,SACR,uDACA,4CACA,uRApCsBC,kBAAgBC,4DAKtC,CACLC,2DAiCKC,WAEGC,KAAKC,MACwCD,KAAKE,UACTF,KAAKG,wCA6ClDC,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,GAC/B,CAAC,UAAUC,SAASD,KACtBE,EAAKC,gBACLD,EAAKE,mEA6EJC,WACFC,cAAc,WACdC,iBAAiB,0BAA2B,SAAAC,GAC3CC,EAAKL,6CAOY,IAAjBX,KAAKL,aACFiB,WAAWC,cAAc,QAAQI,MAAMC,MAC1ClB,KAAKY,WAAWC,cAAc,WAAWM,eAAiB,SAEvDP,WAAWC,cAAc,QAAQI,MAAMtB,QAC1CK,KAAKY,WAAWC,cAAc,WAAWM,eAAiB,gDAO1DC,EAAMC,SAASC,cAAc,OAC/BC,EAAKvB,KAAKY,WAAWC,cAAc,QACnCW,EAAY,SAAAJ,GACVG,EAAGN,MAAMQ,WAA2B,IAAbL,EAAIM,OAAgBN,EAAIF,MAAQ,UAEtDS,SAAW,KAChBP,EAAIQ,aAAa,MAAO5B,KAAKG,aACV0B,IAAfT,EAAIM,QAAwBN,EAAIM,OAAS,EAC3CF,EAAUJ,GAEVA,EAAIN,iBAAiB,OAAQ,WAC3BU,EAAUJ,yCApJP,2bASLnB,MAAO,CACL6B,KAAMC,QAKR5B,OAAQ,CACN2B,KAAMC,OACNC,UAAW,WAKbrC,QAAS,CACPmC,KAAMG,SAKR/B,UAAW,CACT4B,KAAMC,OACNC,UAAW,4DAaR,CACLE,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLpC,MAAO,mBACPqC,YACE,oEACFC,KAAM,gBACNC,MAAO,SACPC,OAAQ,CAAC,QAAS,SAClBC,QAAS,CACP,CACEZ,KAAM,QACNa,OAAQ,YACRC,QAAS,SACT3C,MAAO,UAGX4C,KAAM,CACJC,OAAQ,YAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,QACVhD,MAAO,QACPqC,YAAa,2BACbY,YAAa,YACbX,KAAM,gBAER,CACEU,SAAU,UACVhD,MAAO,kBACPqC,YACE,2HACFY,YAAa,SACbC,QAAS,OACA,mBACD,kBAERZ,KAAM,kBAGVa,UAAW,CACT,CACEH,SAAU,QACVhD,MAAO,QACPqC,YAAa,2BACbY,YAAa,aAEf,CACED,SAAU,YACVhD,MAAO,eACPqC,YAAa,+BACbY,YAAa,YACbG,eAAgB,OAElB,CACEJ,SAAU,SACVhD,MAAO,YACPqC,YAAa,iCACbY,YAAa,YACbG,eAAgB,QAGpBC,SAAU,cA2ClBC,OAAOC,eAAeC,OAAO/D,EAAmBgE,IAAKhE"}