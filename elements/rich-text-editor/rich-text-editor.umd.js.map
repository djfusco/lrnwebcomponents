{"version":3,"file":"rich-text-editor.umd.js","sources":["lib/rich-text-editor-styles.js","lib/rich-text-editor-button.js","lib/rich-text-editor-more-button.js","lib/rich-text-editor-picker.js","lib/rich-text-editor-heading-picker.js","lib/rich-text-editor-symbol-picker.js","lib/rich-text-editor-prompt.js","lib/rich-text-editor-link.js","rich-text-editor.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `rich-text-editor-styles`\n * `a shared set of styles for rich-text-editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @pseudoElement\n * @polymer\n * @demo demo/index.html\n * @see lib/rich-text-editor-styles-demo.js\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nconst styleElement = document.createElement(\"dom-module\");\n\nconst css = html`\n  <style>\n    :host {\n      --rich-text-editor-bg: #fafafa;\n      --rich-text-editor-button-color: #444;\n      --rich-text-editor-border: 1px solid #ddd;\n      --rich-text-editor-button-border: transparent;\n      --rich-text-editor-button-disabled-color: #666;\n      --rich-text-editor-button-disabled-bg: transparent;\n      --rich-text-editor-button-toggled-color: #222;\n      --rich-text-editor-button-toggled-bg: #ddd;\n      --rich-text-editor-button-hover-color: #000;\n      --rich-text-editor-button-hover-bg: #f0f0f0;\n      --rich-text-editor-picker-border: #fafafa;\n      --rich-text-editor-selection-bg: #b3d9ff;\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(rich-text-editor-picker),\n    :host(rich-text-editor-emoji-picker),\n    :host(rich-text-editor-symbol-picker) {\n      --simple-picker-icon-transform: rotate(0deg);\n      --simple-picker-expanded-icon-transform: rotate(0deg);\n      --simple-picker-option: {\n        width: 24px;\n        max-width: 24px;\n      }\n    }\n    :host #collapse {\n      --a11y-collapse-margin: 0 3px;\n      --a11y-collapse-horizontal-padding: 10px;\n      --a11y-collapse-vertical-padding: 5px;\n      --a11y-collapse-border: var(--rich-text-editor-bg);\n      --a11y-collapse: {\n        position: relative;\n      }\n      --a11y-collapse-icon-rotated: {\n        transform: rotate(0deg);\n      }\n      --a11y-collapse-content: {\n        position: absolute;\n        top: 26px;\n        background: white;\n        z-index: 9999;\n      }\n      --a11y-collapse-content-expanded: {\n        border: 1px solid var(--rich-text-editor-button-color);\n        box-shadow: 0px 0px 1px #888;\n      }\n    }\n    :host paper-tooltip {\n      z-index: 99999;\n    }\n    :host #prompt:not([hidden]) {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 9999;\n    }\n    :host #prompt paper-input {\n      width: 200px;\n      padding: 0;\n    }\n    :host .confirm-or-cancel {\n      min-width: 40px;\n    }\n    :host #button,\n    :host .rtebutton {\n      text-transform: unset;\n      padding: 0;\n      transition: all 0.5s;\n      min-width: 24px;\n      height: 24px;\n      color: var(--rich-text-editor-button-color);\n      border-color: var(--rich-text-editor-button-border);\n      --simple-picker-color: var(--rich-text-editor-button-color);\n      --simple-picker-background-color: var(--rich-text-editor-bg);\n      --simple-picker-sample-border-color: var(--rich-text-editor-bg);\n      --simple-picker-border-color: var(--rich-text-editor-button-color);\n      --simple-picker-icon-tranform: rotate(0deg);\n      --simple-picker-expanded-icon-tranform: rotate(-90deg);\n      --simple-picker-option-null: {\n        display: none;\n      }\n      --simple-picker-collapse: {\n        top: 26px;\n      }\n      --simple-picker-sample-null-label: {\n        display: none;\n      }\n      @apply --rich-text-editor-button;\n    }\n    :host([disabled]) #button,\n    :host([disabled]) .rtebutton {\n      cursor: not-allowed;\n      color: var(--rich-text-editor-button-disabled-color);\n      background-color: var(--rich-text-editor-button-disabled-bg);\n      @apply --rich-text-editor-button-disabled;\n    }\n    :host #button[toggled],\n    :host .rtebutton[toggled] {\n      color: var(--rich-text-editor-button-toggled-color);\n      background-color: var(--rich-text-editor-button-toggled-bg);\n      @apply --rich-text-editor-button-toggled;\n    }\n    :host #button:focus,\n    :host #button:hover,\n    :host .rtebutton:focus,\n    :host .rtebutton:hover {\n      color: var(--rich-text-editor-button-hover-color);\n      background-color: var(--rich-text-editor-button-hover-bg);\n    }\n    :host #button #icon:not([icon]),\n    :host .rtebutton #icon:not([icon]) {\n      display: none;\n    }\n    :host .offscreen {\n      position: absolute;\n      left: -999999px;\n      top: 0;\n      height: 0;\n      width: 0;\n      overflow: hidden;\n    }\n  </style>\n`;\nstyleElement.appendChild(css);\n\nstyleElement.register(\"rich-text-editor-styles\");\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"./rich-text-editor-styles.js\";\n/**\n * `rich-text-editor-button`\n * `a button for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorButton extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style include=\"rich-text-editor-styles\"></style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[__a11y]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_buttonTap\"\n      >\n      </iron-a11y-keys>\n      <paper-button\n        id=\"button\"\n        class=\"rtebutton\"\n        disabled$=\"[[disabled]]\"\n        controls=\"[[controls]]\"\n        on-tap=\"_buttonTap\"\n        tabindex=\"0\"\n        toggled$=\"[[toggled]]\"\n      >\n        <iron-icon\n          id=\"icon\"\n          aria-hidden\n          icon$=\"[[_regOrToggled(icon,toggledIcon,toggled)]]\"\n        >\n        </iron-icon>\n        <span id=\"label\" class$=\"[[labelStyle]]\"></span>\n      </paper-button>\n      <paper-tooltip id=\"tooltip\" for=\"button\"></paper-tooltip>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The command used for document.execCommand.\n       */\n      command: {\n        name: \"command\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Optional parameter for the command.\n       */\n      commandVal: {\n        name: \"commandVal\",\n        type: \"Object\",\n        value: null,\n        notify: true\n      },\n\n      /**\n       * Is the button disabled? Default is false.\n       */\n      disabled: {\n        name: \"disabled\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * Optional iron icon name for the button.\n       */\n      icon: {\n        name: \"icon\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Label for the icon.\n       */\n      label: {\n        name: \"label\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Hide the label offscreen?\n       */\n      labelStyle: {\n        name: \"labelStyle\",\n        type: \"String\",\n        computed: \"_labelStyle(icon,showTextLabel)\",\n        readOnly: true\n      },\n\n      /**\n       * The active selection, inherited from the toolbar\n       */\n      selection: {\n        name: \"selection\",\n        type: \"Object\",\n        notify: true,\n        value: null\n      },\n\n      /**\n       * Show text label even if an icon is named?\n       */\n      showTextLabel: {\n        name: \"showTextLabel\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * Is this button toggled?\n       */\n      toggled: {\n        name: \"toggled\",\n        type: \"Boolean\",\n        computed: \"_isToggled(selection)\",\n        notify: true\n      },\n\n      /**\n       * The label for the button based on its toggled state\n       */\n      __label: {\n        name: \"__label\",\n        type: \"String\",\n        computed: \"_getLabel(selection)\",\n        notify: true\n      },\n\n      /**\n       * The command used for document.execCommand when toggled.\n       */\n      toggledCommand: {\n        name: \"toggledCommand\",\n        type: \"String\",\n        value: null\n      },\n      /**\n       * Optional parameter for the command when toggled.\n       */\n      toggledCommandVal: {\n        name: \"toggledCommandVal\",\n        type: \"Object\",\n        value: null\n      },\n\n      /**\n       * Optional iron icon name for the button if it is toggled.\n       */\n      toggledIcon: {\n        name: \"toggledIcon\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Label for the icon, if button is toggled.\n       */\n      toggledLabel: {\n        name: \"toggledLabel\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Can this button toggle?\n       */\n      toggles: {\n        name: \"toggles\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * List of valid commands\n       */\n      validCommands: {\n        name: \"validCommands\",\n        type: \"Array\",\n        value: [\n          \"backColor\",\n          \"bold\",\n          \"createLink\",\n          \"copy\",\n          \"cut\",\n          \"defaultParagraphSeparator\",\n          \"delete\",\n          \"fontName\",\n          \"fontSize\",\n          \"foreColor\",\n          \"formatBlock\",\n          \"forwardDelete\",\n          \"insertHorizontalRule\",\n          \"insertHTML\",\n          \"insertImage\",\n          \"insertLineBreak\",\n          \"insertOrderedList\",\n          \"insertParagraph\",\n          \"insertText\",\n          \"insertUnorderedList\",\n          \"justifyCenter\",\n          \"justifyFull\",\n          \"justifyLeft\",\n          \"justifyRight\",\n          \"outdent\",\n          \"paste\",\n          \"redo\",\n          \"selectAll\",\n          \"strikethrough\",\n          \"styleWithCss\",\n          \"superscript\",\n          \"undo\",\n          \"unlink\",\n          \"useCSS\"\n        ],\n        readOnly: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-button\";\n  }\n\n  /**\n   * life cycle, element is ready\n   */\n  ready() {\n    super.ready();\n    let root = this;\n    root.addEventListener(\"mousedown\", function(e) {\n      e.preventDefault();\n    });\n    root.addEventListener(\"keydown\", function(e) {\n      e.preventDefault();\n    });\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__a11y = this.$.button;\n  }\n\n  /**\n   * life cycle, element is detatched\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n\n  /**\n   * excutes the button's command\n   */\n  doTextOperation() {\n    let root = this,\n      selection = root.selection;\n    if (root.toggled && root.toggledCommand !== null) {\n      document.execCommand(\n        root.toggledCommand,\n        false,\n        root.toggledCommand || \"\"\n      );\n    } else if (root.command !== null) {\n      document.execCommand(root.command, false, root.commandVal || \"\");\n    }\n    root.selection = selection;\n  }\n\n  /**\n   * determine if the button is toggled\n   *\n   * @param {object} the text selection\n   * @returns {boolean} whether the button is toggled\n   *\n   */\n  _isToggled(selection) {\n    let toggled =\n        this.command !== null && this.toggles\n          ? document.queryCommandState(this.command)\n          : false,\n      label = this._regOrToggled(this.label, this.toggledLabel, toggled);\n    if (this.$.label !== undefined) this.$.label.innerHTML = label;\n    if (this.$.tooltip !== undefined) this.$.tooltip.innerHTML = label;\n    return toggled;\n  }\n\n  /**\n   * determine if the button is toggled\n   *\n   * @param {object} the text selection\n   * @returns {string} the label based on whether or not the button is toggled\n   *\n   */\n  _getLabel(selection) {\n    let toggled =\n        this.command !== null && this.toggles\n          ? document.queryCommandState(this.command)\n          : false,\n      label = this._regOrToggled(this.label, this.toggledLabel, toggled);\n    return label;\n  }\n  /**\n   * Handles button tap;\n   */\n  _buttonTap(e) {\n    e.preventDefault();\n    this.doTextOperation();\n  }\n  /**\n   * updates a button value based on whether or not button is toggled\n   *\n   * @param {string} the value when toggled off\n   * @param {string} the value when toggled on\n   * @param {boolean} whether the button is toggled\n   * @returns {string} the correct value based on\n   * whether or not the button is toggled\n   */\n  _regOrToggled(toggledOff, toggledOn, toggled) {\n    return toggledOn !== null && toggled ? toggledOn : toggledOff;\n  }\n\n  /**\n   * Determines if an iron icon has been named for the button.\n   *\n   * @param {string} the name of the icon\n   * @returns {boolean} if an icon is named\n   */\n  _labelStyle(icon, showTextLabel) {\n    return icon !== undefined &&\n      icon !== null &&\n      icon !== \"\" &&\n      showTextLabel === false\n      ? \"offscreen\"\n      : null;\n  }\n}\nwindow.customElements.define(RichTextEditorButton.tag, RichTextEditorButton);\nexport { RichTextEditorButton };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { RichTextEditorButton } from \"./rich-text-editor-button.js\";\n/**\n * `rich-text-editor-more-button`\n * `a more button to toggle collapsed buttons in the rich text editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorMoreButton extends RichTextEditorButton {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Can this button toggle?\n       */\n      toggled: {\n        name: \"toggled\",\n        type: \"Boolean\",\n        value: false,\n        observer: \"_updateLabels\",\n        reflectToAttribute: true\n      },\n      /**\n       * The maximum size where all of the buttons display\n       */\n      collapseMax: {\n        name: \"collapseMax\",\n        type: \"String\",\n        value: \"xs\",\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-more-button\";\n  }\n\n  /**\n   * Fires a button tap event\n   */\n  _buttonTap(e) {\n    this.dispatchEvent(\n      new CustomEvent(\"rich-text-more-button-tap\", { detail: this })\n    );\n  }\n\n  /**\n   * updates the selection\n   *\n   * @param {boolean} whether the expand is toggled\n   */\n  _updateLabels(toggled) {\n    let label = this._regOrToggled(this.label, this.toggledLabel, toggled);\n    this.$.label.innerHTML = label;\n    this.$.tooltip.innerHTML = label;\n  }\n}\nwindow.customElements.define(\n  RichTextEditorMoreButton.tag,\n  RichTextEditorMoreButton\n);\nexport { RichTextEditorMoreButton };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { RichTextEditorButton } from \"./rich-text-editor-button.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/simple-picker/simple-picker.js\";\n/**\n * `rich-text-editor-picker`\n * `a picker for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorPicker extends RichTextEditorButton {\n  // render function\n  static get template() {\n    return html`\n      <style include=\"rich-text-editor-styles\"></style>\n      <simple-picker\n        id=\"button\"\n        class=\"rtebutton\"\n        disabled$=\"[[disabled]]\"\n        controls=\"[[controls]]\"\n        on-change=\"_pickerChange\"\n        tabindex=\"0\"\n        title-as-html$=\"[[titleAsHtml]]\"\n        options=\"[[options]]\"\n        value=\"{{value}}\"\n      >\n        <span id=\"label\" class$=\"[[labelStyle]]\"></span>\n      </simple-picker>\n      <paper-tooltip id=\"tooltip\" for=\"button\"></paper-tooltip>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Allow a null option to be selected?\n       */\n      allowNull: {\n        name: \"allowNull\",\n        type: \"Boolean\",\n        value: false\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      command: {\n        name: \"command\",\n        type: \"String\",\n        value: \"insertHTML\",\n        readOnly: true\n      },\n      /**\n       * Optional icon for null value\n       */\n      icon: {\n        name: \"icon\",\n        type: \"String\",\n        value: null\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      options: {\n        name: \"options\",\n        type: \"Array\",\n        value: [],\n        notify: true\n      },\n\n      /**\n       * Renders html as title. (Good for titles with HTML in them.)\n       */\n      titleAsHtml: {\n        name: \"titleAsHtml\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * The value\n       */\n      value: {\n        name: \"value\",\n        type: \"Object\",\n        value: null\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-picker\";\n  }\n\n  /**\n   * determins if the button is toggled\n   *\n   * @param {object} the text selection\n   * @returns {boolean} whether the button is toggled\n   *\n   */\n  _isToggled(selection) {\n    let toggled = false;\n    if (selection !== null) {\n      if (this.command === \"formatBlock\") {\n        let ancestor = selection.commonAncestorContainer,\n          parent = ancestor.parentNode,\n          temp = [];\n        this.options.forEach(function(row) {\n          row.forEach(function(option) {\n            temp.push(option.value);\n          });\n        });\n        this.$.button.value =\n          parent.closest(temp.join(\",\")) !== null\n            ? parent.closest(temp.join(\",\")).tagName.toLowerCase()\n            : null;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Handles default options loaded from an external js file\n   */\n  _setOptions() {\n    this.set(\n      \"options\",\n      this._getPickerOptions(data, this.allowNull, this.icon)\n    );\n  }\n\n  /**\n   * Picker change\n   */\n  _pickerChange(e) {\n    let val = this.$.button.value;\n    e.preventDefault();\n    if (\n      val !== null &&\n      this.selection !== undefined &&\n      this.selection !== null\n    ) {\n      this.commandVal = this.$.button.value;\n      if ((this.command = \"formatBlock\")) {\n        this.doTextOperation();\n      } else if ((this.command = \"insertNode\")) {\n        let node = !this.block\n          ? document.createTextNode(val)\n          : document.createElement(val);\n        this.selection.extractContents();\n        this.selection.insertNode(node);\n      }\n      if (this.block !== true) {\n        this.$.button.value = null;\n        this.dispatchEvent(new CustomEvent(\"deselect\", { detail: this }));\n      }\n    }\n  }\n  /**\n   * Converts option data to picker option data;\n   * can be overridden in extended elements\n   *\n   * @param {object} data about the option\n   * @returns {object} picker dato for the option\n   */\n  _getOptionData(option) {\n    return {\n      alt: option.alt,\n      icon: option.icon,\n      style: option.style,\n      value: option.value\n    };\n  }\n\n  /**\n   * gets a list of icons and load them in a format\n   * that the simple-picker can take;\n   * if no icons are provided, loads a list from iron-meta\n   *\n   * @param {array} a list of custom icons for the picker\n   * @param {array} default list of icons for the picker\n   * @param {boolean} allow a null value for the picker\n   */\n  _getPickerOptions(options = [], allowNull = false, icon = null) {\n    let items =\n        allowNull === false && icon === null\n          ? [{ alt: \"null\", icon: icon, value: null }]\n          : [],\n      cols =\n        Math.sqrt(options.length) < 11\n          ? Math.ceil(Math.sqrt(options.length))\n          : 10;\n    for (let i = 0; i < options.length; i++) {\n      let row = Math.floor(i / cols),\n        col = i - row * cols,\n        data = this._getOptionData(options[i]);\n      if (items[row] === undefined || items[row] === null) items[row] = [];\n      if (row === 0 && allowNull === false && icon !== null) {\n        items[0][0] = { alt: \"null\", icon: icon, value: null };\n        col++;\n      }\n      items[row][col] = data;\n    }\n    return items;\n  }\n}\nwindow.customElements.define(RichTextEditorPicker.tag, RichTextEditorPicker);\nexport { RichTextEditorPicker };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { RichTextEditorPicker } from \"./rich-text-editor-picker.js\";\nimport \"@polymer/iron-icons/editor-icons.js\";\n/**\n * `rich-text-editor-heading-picker`\n * `a heading picker for the rich-text-editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorHeadingPicker extends RichTextEditorPicker {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Allow a null option to be selected?\n       */\n      allowNull: {\n        name: \"allowNull\",\n        type: \"Boolean\",\n        value: false\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      command: {\n        name: \"command\",\n        type: \"String\",\n        value: \"formatBlock\",\n        readOnly: true\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      blocks: {\n        name: \"blocks\",\n        type: \"Array\",\n        notify: true,\n        value: [\n          { label: \"Paragraph\", tag: \"p\" },\n          { label: \"Heading 1\", tag: \"h1\" },\n          { label: \"Heading 2\", tag: \"h2\" },\n          { label: \"Heading 3\", tag: \"h3\" },\n          { label: \"Heading 4\", tag: \"h4\" },\n          { label: \"Heading 5\", tag: \"h5\" },\n          { label: \"Heading 6\", tag: \"h6\" },\n          { label: \"Preformatted\", tag: \"pre\" }\n        ]\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      options: {\n        name: \"options\",\n        type: \"Array\",\n        computed: \"_getBlockOptions(blocks)\",\n        notify: true\n      },\n\n      /**\n       * Renders html as title. (Good for titles with HTML in them.)\n       */\n      titleAsHtml: {\n        name: \"titleAsHtml\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       *\n       */\n      block: {\n        name: \"block\",\n        type: \"Boolean\",\n        value: true,\n        readOnly: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-heading-picker\";\n  }\n\n  _getBlockOptions(blocks) {\n    let temp = [];\n    blocks.forEach(function(block) {\n      temp.push([\n        {\n          alt: block.label,\n          value: block.tag\n        }\n      ]);\n    });\n    return temp;\n  }\n}\nwindow.customElements.define(\n  RichTextEditorHeadingPicker.tag,\n  RichTextEditorHeadingPicker\n);\nexport { RichTextEditorHeadingPicker };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { RichTextEditorPicker } from \"./rich-text-editor-picker.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\n/**\n * `rich-text-editor-symbol-picker`\n * `a symbol picker for the rich-text-editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorSymbolPicker extends RichTextEditorPicker {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Optional icon for null value\n       */\n      icon: {\n        name: \"icon\",\n        type: \"String\",\n        value: \"editor:functions\",\n        readOnly: true\n      },\n\n      /**\n       * An optional JSON file with default options.\n       */\n      optionsSrc: {\n        name: \"optionsSrc\",\n        type: \"String\",\n        value: \"data/symbols.js\"\n      },\n\n      /**\n       * Symbol types to include\n       */\n      symbolTypes: {\n        name: \"symbolTypes\",\n        type: \"Array\",\n        value: [\"symbols\", \"math\", \"characters\", \"greek\", \"misc\"]\n      },\n\n      /**\n       * Renders html as title. (Good for titles with HTML in them.)\n       */\n      titleAsHtml: {\n        name: \"titleAsHtml\",\n        type: \"Boolean\",\n        value: true,\n        readOnly: true\n      },\n\n      /**\n       * The value\n       */\n      value: {\n        name: \"value\",\n        type: \"String\",\n        value: \"null\"\n      }\n    };\n  }\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   *\n   */\n  static get tag() {\n    return \"rich-text-editor-symbol-picker\";\n  }\n  constructor() {\n    super();\n    import(\"@polymer/iron-icons/editor-icons.js\");\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    const basePath = pathFromUrl(decodeURIComponent(import.meta.url));\n    const src = this.optionsSrc;\n    const location = `${basePath}${src}`;\n    window.addEventListener(\n      \"es-bridge-symbols-loaded\",\n      this._setOptions.bind(this)\n    );\n    window.ESGlobalBridge.requestAvailability();\n    window.ESGlobalBridge.instance.load(\"symbols\", location);\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\n      \"es-bridge-symbols-loaded\",\n      this._setOptions.bind(this)\n    );\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Handles default options loaded from an external js file\n   */\n  _setOptions() {\n    let optData = [];\n    this.symbolTypes.forEach(function(type) {\n      optData = optData.concat(symbols[type]);\n    });\n    this.set(\n      \"options\",\n      this._getPickerOptions(optData, this.allowNull, this.icon)\n    );\n  }\n\n  /**\n   * Converts option data to picker option data;\n   * can be overridden in extended elements\n   *\n   * @param {object} data about the option\n   * @returns {object} picker dato for the option\n   */\n  _getOptionData(option) {\n    return {\n      value: option,\n      alt: option,\n      icon: null,\n      style: null\n    };\n  }\n}\nwindow.customElements.define(\n  RichTextEditorSymbolPicker.tag,\n  RichTextEditorSymbolPicker\n);\nexport { RichTextEditorSymbolPicker };\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/iron-resizable-behavior/iron-resizable-behavior.js\";\nimport \"@lrnwebcomponents/simple-popover/simple-popover.js\";\nimport \"@lrnwebcomponents/simple-fields/simple-fields.js\";\nimport \"./rich-text-editor-styles.js\";\n\n// register globally so we can make sure there is only one\nwindow.richTextEditorPrompt = window.richTextEditorPrompt || {};\n// request if this exists. This helps invoke the element existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same modal\nwindow.richTextEditorPrompt.requestAvailability = () => {\n  if (!window.richTextEditorPrompt.instance) {\n    window.richTextEditorPrompt.instance = document.createElement(\n      \"rich-text-editor-prompt\"\n    );\n    document.body.appendChild(window.richTextEditorPrompt.instance);\n  }\n  return window.richTextEditorPrompt.instance;\n};\n/**\n * `rich-text-editor-prompt`\n * `A utility that manages the state of multiple rich-text-prompts on one page.`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass richTextEditorPrompt extends PolymerElement {\n  /* REQUIRED FOR TOOLING DO NOT TOUCH */ // render function\n  static get template() {\n    return html`\n      <style include=\"rich-text-editor-styles\">\n        :host {\n          --simple-popover-padding: 0 10px;\n          --paper-input-container-focus-color: var(\n            --rich-text-editor-focus-color,\n            #000\n          );\n          --paper-input-container-invalid-color: var(\n            --rich-text-editor-error-color,\n            #800\n          );\n        }\n        :host .actions {\n          text-align: right;\n        }\n        :host #cancel.rtebutton:focus,\n        :host #cancel.rtebutton:hover {\n          color: var(\n            --rich-text-editor-cancel-color,\n            var(--rich-text-editor-error-color)\n          );\n          background-color: var(\n            --rich-text-editor-cancel-hover-color,\n            var(--rich-text-editor-button-hover-bg)\n          );\n        }\n        :host #confirm.rtebutton:focus,\n        :host #confirm.rtebutton:hover {\n          color: var(\n            --rich-text-editor-confirm-color,\n            var(--rich-text-editor-focus-color)\n          );\n          background-color: var(\n            --rich-text-editor-confirm-hover-color,\n            var(--rich-text-editor-button-hover-bg)\n          );\n        }\n      </style>\n      <simple-popover id=\"prompt\" hidden$=\"[[!target]]\" for$=\"[[for]]\" auto>\n        <form id=\"form\">\n          <simple-fields\n            id=\"formfields\"\n            fields=\"[[fields]]\"\n            value=\"{{value}}\"\n          ></simple-fields>\n          <div class=\"actions\">\n            <iron-a11y-keys\n              id=\"a11ycancel\"\n              target=\"[[__a11ycancel]]\"\n              keys=\"enter\"\n              on-keys-pressed=\"_cancel\"\n            >\n            </iron-a11y-keys>\n            <paper-button\n              id=\"cancel\"\n              class=\"rtebutton\"\n              controls=\"[[__targetId]]\"\n              on-tap=\"_cancel\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden icon=\"clear\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">Cancel</span>\n            </paper-button>\n            <paper-tooltip id=\"tooltip\" for=\"cancel\">Cancel</paper-tooltip>\n            <iron-a11y-keys\n              id=\"a11yconfirm\"\n              target=\"[[__a11yconfirm]]\"\n              keys=\"enter\"\n              on-keys-pressed=\"_confirm\"\n            >\n            </iron-a11y-keys>\n            <paper-button\n              id=\"confirm\"\n              class=\"rtebutton\"\n              controls=\"[[__targetId]]\"\n              on-tap=\"_confirm\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden icon=\"check\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">OK</span>\n            </paper-button>\n            <paper-tooltip id=\"tooltip\" for=\"confirm\">OK</paper-tooltip>\n          </div>\n        </form>\n      </simple-popover>\n    `;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-prompt\";\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Is the  target id.\n       */\n      for: {\n        type: String,\n        value: null\n      },\n      /**\n       * The selected text.\n       */\n      selection: {\n        type: Object,\n        value: null\n      },\n      /**\n       * Is the  target selection for the prompt.\n       */\n      target: {\n        type: Object,\n        value: null\n      },\n      /**\n       * fields for the prompt popover.\n       */\n      fields: {\n        type: Array,\n        value: null\n      },\n      /**\n       * The prefilled value of the prompt\n       */\n      value: {\n        type: Object,\n        value: null,\n        observer: \"_valueChanged\"\n      }\n    };\n  }\n\n  /**\n   * Makes sure there is a utility ready and listening for elements.\n   */\n  constructor() {\n    super();\n    let root = this;\n\n    // sets the instance to the current instance\n    if (!window.richTextEditorPrompt.instance) {\n      window.richTextEditorPrompt.instance = this;\n      return this;\n    }\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   * Makes sure there is a utility ready and listening for elements.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__a11yconfirm = this.$.confirm;\n    this.__a11ycancel = this.$.cancel;\n  }\n\n  _valueChanged() {\n    console.log(\"_valueChanged\");\n  }\n\n  /**\n   * Loads element into array\n   */\n  setTarget(el) {\n    this.clearTarget();\n    let fields = el.fields,\n      vals = el.value;\n    this.target = el.target;\n    this.set(\"fields\", fields);\n    this.set(\"value\", vals);\n    this.__el = el;\n    this.for = el.target.getAttribute(\"id\");\n  }\n\n  /**\n   * Unloads element from array\n   */\n  clearTarget() {\n    console.log(\"clearTarget\", this.for);\n    if (!this.for) return;\n    this.for = null;\n    this.target = null;\n    this.set(\"fields\", null);\n    this.set(\"value\", null);\n    this.__selection = null;\n    this.__el = null;\n  }\n  /**\n   * Handles button tap;\n   */\n  _cancel(e) {\n    e.preventDefault();\n    this.clearTarget();\n  }\n  /**\n   * Handles button tap;\n   */\n  _confirm(e) {\n    e.preventDefault();\n    this.__el.value = this.value;\n    this.__el.doTextOperation();\n    this.clearTarget();\n  }\n}\nwindow.customElements.define(richTextEditorPrompt.tag, richTextEditorPrompt);\nexport { richTextEditorPrompt };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"./rich-text-editor-styles.js\";\nimport { RichTextEditorButton } from \"./rich-text-editor-button.js\";\nimport \"./rich-text-editor-prompt.js\";\n/**\n * `rich-text-editor-link`\n * `a button for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorLink extends RichTextEditorButton {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * fields for the prompt popover.\n       */\n      fields: {\n        type: Array,\n        value: [\n          {\n            property: \"text\",\n            title: \"Text\",\n            description: \"The link text\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"link\",\n            title: \"Link\",\n            description: \"The link URL\",\n            inputMethod: \"textfield\"\n          }\n        ]\n      },\n      /**\n       * the text of the prompt, as in \"Link href\" or \"Image src\"\n       */\n      prompt: {\n        name: \"prompt\",\n        type: String,\n        value: \"Value\"\n      },\n      /**\n       * the target of the prompt\n       */\n      target: {\n        name: \"target\",\n        type: Object,\n        value: null\n      },\n      /**\n       * The prefilled value of the prompt\n       */\n      value: {\n        type: Object,\n        value: {\n          link: null\n        }\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-link\";\n  }\n\n  /**\n   * life cycle, element is ready\n   */\n  ready() {\n    super.ready();\n    console.log(\n      getComputedStyle(this).getPropertyValue(\n        \"--rich-text-editor-picker-border\"\n      )\n    );\n    let root = this;\n    this.__popover = window.richTextEditorPrompt.requestAvailability();\n  }\n  /**\n   * Handles button tap;\n   */\n  _buttonTap(e) {\n    e.preventDefault();\n    this.getSelectionData();\n    this.__popover.setTarget(this);\n  }\n  /**\n   * placeholder function for prompt action\n   */\n  getSelectionData() {\n    let sel = this.selection.commonAncestorContainer,\n      parent = sel.tagName === \"A\" ? sel : sel.parentNode;\n    if (parent.tagName === \"A\") {\n      this.value.link = parent.getAttribute(\"href\");\n      this.target = parent;\n    } else {\n      this.target = document.createElement(\"a\");\n      this.target.appendChild(this.selection.extractContents());\n      this.selection.insertNode(this.target);\n    }\n    if (!this.target.getAttribute(\"id\"))\n      this.target.setAttribute(\"id\", \"prompt\" + Date.now());\n    this.__style = this.style;\n    this.target.style.backgroundColor = getComputedStyle(this).getPropertyValue(\n      \"--rich-text-editor-selection-bg\"\n    );\n    this.value.text = this.target.innerHTML;\n  }\n  doTextOperation() {\n    if (this.value.link !== null && this.value.link.trim() !== \"\") {\n      this.target.setAttribute(\"href\", this.value.link.trim());\n      this.target.innerHTML = this.value.text;\n      this.target.style = this.__style;\n    } else {\n      let parent = this.target.parentNode;\n      while (this.target.firstChild)\n        parent.insertBefore(this.target.firstChild, this.target);\n      parent.removeChild(this.target);\n    }\n    this.target = null;\n    this.value = {};\n    this.dispatchEvent(new CustomEvent(\"deselect\", { detail: this }));\n  }\n}\nwindow.customElements.define(RichTextEditorLink.tag, RichTextEditorLink);\nexport { RichTextEditorLink };\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { HAXWiring } from \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport { ResponsiveUtility } from \"@lrnwebcomponents/responsive-utility/responsive-utility.js\";\nimport \"./lib/rich-text-editor-button.js\";\nimport \"./lib/rich-text-editor-more-button.js\";\nimport \"./lib/rich-text-editor-heading-picker.js\";\nimport \"./lib/rich-text-editor-symbol-picker.js\";\nimport \"./lib/rich-text-editor-link.js\";\nimport \"./lib/rich-text-editor-styles.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icons/editor-icons.js\";\nimport \"@polymer/iron-icons/image-icons.js\";\nimport \"@lrnwebcomponents/md-extra-icons/md-extra-icons.js\";\n/**\n * `rich-text-editor`\n * `a standalone rich text editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n * @demo demo/content.html easy implementation\n * @demo demo/config.html custom configuration\n */\nclass RichTextEditor extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  z-index: 9999;\n  @apply --rich-text-editor;\n}\n:host([sticky]) {\n  position: sticky;\n  top: 0;\n}\n:host #toolbar {\n  display: flex;\n  opacity: 1;\n  margin: 0;\n  align-items: stretch;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  background-color: var(--rich-text-editor-bg);\n  border: var(--rich-text-editor-border);\n  font-size: 12px;\n  transition: all 0.5s;\n  @apply --rich-text-editor-toolbar;\n} \n:host #toolbar[aria-hidden]{\n  visibility: hidden;\n  opacity: 0;\n  height: 0;\n}\n:host #toolbar .group {\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-evenly;\n  align-items: stretch;\n  padding: 0 3px;\n  @apply --rich-text-editor-toolbar-group;\n}\n:host #toolbar .group:not(:last-of-type) {\n  margin-right: 3px;\n  border-right: var(--rich-text-editor-border);\n  @apply --rich-text-editor-toolbar-divider;\n}\n:host #toolbar .button {\n  display: flex;\n  flex: 0 0 auto;\n  align-items: stretch;\n  margin: 3px;\n}\n:host #toolbar #morebutton {\n  flex: 1 0 auto;\n  justify-content: flex-end;\n}\n\n:host([responsive-size=\"xs\"]) #morebutton[collapse-max=\"xs\"],\n:host([responsive-size=\"sm\"]) #morebutton[collapse-max*=\"s\"],\n:host([responsive-size=\"md\"]) #morebutton:not([collapse-max*=\"l\"]),\n:host([responsive-size=\"lg\"]) #morebutton:not([collapse-max=\"xl\"]),\n:host([responsive-size=\"xl\"]) #morebutton,\n\n:host([responsive-size=\"xs\"]) #toolbar[collapsed] *[collapsed-until*=\"m\"],\n:host([responsive-size=\"xs\"]) #toolbar[collapsed] *[collapsed-until*=\"l\"],\n:host([responsive-size=\"sm\"]) #toolbar[collapsed] *[collapsed-until=\"md\"],\n:host([responsive-size=\"sm\"]) #toolbar[collapsed] *[collapsed-until*=\"l\"],\n:host([responsive-size=\"md\"]) #toolbar[collapsed] *[collapsed-until*=\"l\"],\n:host([responsive-size=\"lg\"]) #toolbar[collapsed] *[collapsed-until=\"xl\"] {\n  display: none;\n}</style>\n<style include=\"rich-text-editor-styles\"></style>\n<div id=\"toolbar\" aria-hidden$=\"[[!controls]]\" collapsed$=\"[[collapsed]]\">\n  <rich-text-editor-more-button\n    id=\"morebutton\"\n    class=\"button\"\n    controls=\"toolbar\"\n    icon=\"more-vert\"\n    label=\"More buttons\"\n    label-toggled=\"Fewer buttons\"\n    toggled$=\"[[!collapsed]]\"\n    on-tap=\"_toggleMore\">\n  </rich-text-editor-more-button>  \n</div>`;\n  }\n\n  // haxProperty definition\n  static get haxProperties() {\n    return {\n  \"canScale\": true,\n  \"canPosition\": true,\n  \"canEditSource\": false,\n  \"gizmo\": {\n    \"title\": \"Rich text-editor\",\n    \"description\": \"a standalone rich text editor\",\n    \"icon\": \"icons:android\",\n    \"color\": \"green\",\n    \"groups\": [\"Text\"],\n    \"handles\": [\n      {\n        \"type\": \"todo:read-the-docs-for-usage\"\n      }\n    ],\n    \"meta\": {\n      \"author\": \"nikkimk\",\n      \"owner\": \"Penn State University\"\n    }\n  },\n  \"settings\": {\n    \"quick\": [],\n    \"configure\": [\n      {\n        \"property\": \"title\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\",\n        \"required\": false,\n        \"icon\": \"icons:android\"\n      }\n    ],\n    \"advanced\": []\n  }\n}\n;\n  }\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * The editor buttons.\n   */\n  \"buttons\": {\n    \"name\": \"buttons\",\n    \"type\": \"Array\",\n    \"computed\": \"_getButtons(config)\"\n  },\n  /**\n   * The editable content, if edits are canceled.\n   */\n  \"canceled\": {\n    \"name\": \"canceled\",\n    \"type\": \"Object\",\n    \"value\": true\n  },\n  /**\n   * Is the menu collapsed.\n   */\n  \"collapsed\": {\n    \"name\": \"collapsed\",\n    \"type\": \"Boolean\",\n    \"value\": true\n  },\n  /**\n   * The button config on the toolbar.\n   */\n  \"config\": {\n    \"name\": \"config\",\n    \"type\": \"Object\",\n    \"value\": [\n      {\n        \"label\": \"History\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"undo\",\n            \"icon\": \"undo\",\n            \"label\": \"Undo\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"redo\",\n            \"icon\": \"redo\",\n            \"label\": \"Redo\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"label\": \"Basic Inline Operations\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"label\": \"Heading\",\n            \"type\": \"rich-text-editor-heading-picker\"\n          },\n          {\n            \"command\": \"bold\",\n            \"icon\": \"editor:format-bold\",\n            \"label\": \"Bold\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"italic\",\n            \"icon\": \"editor:format-italic\",\n            \"label\": \"Italics\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"removeFormat\",\n            \"icon\": \"editor:format-clear\",\n            \"label\": \"Erase Format\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"label\": \"Links\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"link\",\n            \"icon\": \"link\",\n            \"label\": \"Link\",\n            \"prompt\": \"href\",\n            \"toggledCommand\": \"unlink\",\n            \"toggledIcon\": \"mdextra:unlink\",\n            \"toggledLabel\": \"Unink\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-link\"\n          }\n        ]\n      },\n      {\n        \"label\": \"Clipboard Operations\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"cut\",\n            \"icon\": \"content-cut\",\n            \"label\": \"Cut\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"copy\",\n            \"icon\": \"content-copy\",\n            \"label\": \"Copy\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"paste\",\n            \"icon\": \"content-paste\",\n            \"label\": \"Paste\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"collapsedUntil\": \"md\",\n        \"label\": \"Subscript and Superscript\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"subscript\",\n            \"icon\": \"mdextra:subscript\",\n            \"label\": \"Subscript\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"superscript\",\n            \"icon\": \"mdextra:superscript\",\n            \"label\": \"Superscript\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"collapsedUntil\": \"sm\",\n        \"icon\": \"editor:functions\",\n        \"label\": \"Insert Symbol\",\n        \"symbolTypes\": [\"symbols\"],\n        \"type\": \"rich-text-editor-symbol-picker\"\n      },\n      {\n        \"collapsedUntil\": \"sm\",\n        \"label\": \"Lists and Indents\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"insertOrderedList\",\n            \"icon\": \"editor:format-list-numbered\",\n            \"label\": \"Ordered List\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"insertUnorderedList\",\n            \"icon\": \"editor:format-list-bulleted\",\n            \"label\": \"Unordered List\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"collapsedUntil\": \"lg\",\n            \"command\": \"formatBlock\",\n            \"commandVal\": \"blockquote\",\n            \"label\": \"Blockquote\",\n            \"icon\": \"editor:format-quote\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"label\": \"Increase Indent\",\n            \"icon\": \"editor:format-indent-increase\",\n            \"event\": \"text-indent\",\n            \"command\": \"indent\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"label\": \"Decrease Indent\",\n            \"icon\": \"editor:format-indent-decrease\",\n            \"event\": \"text-outdent\",\n            \"command\": \"outdent\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      }\n    ]\n  },\n  /**\n   * The target element's id attribute.\n   */\n  \"controls\": {\n    \"name\": \"controls\",\n    \"type\": \"String\",\n    \"value\": null\n  },\n  /**\n   * The editableElement element for the editor.\n   */\n  \"editableElements\": {\n    \"name\": \"editableElements\",\n    \"type\": \"Array\",\n    \"value\": []\n  },\n  /**\n   * The editableElement element for the editor.\n   */\n  \"editableElement\": {\n    \"name\": \"editableElement\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * The the size of the editor.\n   */\n  \"responsiveSize\": {\n    \"name\": \"responsiveSize\",\n    \"type\": \"String\",\n    \"value\": \"xs\",\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The current text selection.\n   */\n  \"savedSelection\": {\n    \"name\": \"savedSelection\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * The current text selection.\n   */\n  \"selection\": {\n    \"name\": \"selection\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * Should the toolbar stick to the top so that it is always visible.\n   */\n  \"sticky\": {\n    \"name\": \"sticky\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    let root = this;\n    window.ResponsiveUtility.requestAvailability();\n    window.dispatchEvent(\n      new CustomEvent(\"responsive-element\", {\n        detail: {\n          element: root,\n          attribute: \"responsive-size\",\n          relativeToParent: true\n        }\n      })\n    );\n    document.designMode = \"on\";\n    document.addEventListener(\"selectionchange\", e => {\n      root.getUpdatedSelection();\n    });\n  }\n\n  /**\n   * life cycle, element is disconnected\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    let root = this;\n    document.removeEventListener(\"selectionchange\", e => {\n      root.getUpdatedSelection();\n    });\n  }\n\n  /**\n   * cancels edits to the active editableElement\n   */\n  cancel() {\n    this.editableElement.innerHTML = this.canceled;\n    this.editTarget(null);\n  }\n  /**\n   * makes a editableElement editable\n   *\n   * @param {object} an HTML object that can be edited\n   */\n  editTarget(editableElement) {\n    let root = this;\n    if (\n      editableElement.getAttribute(\"id\") === undefined ||\n      editableElement.getAttribute(\"id\") === null\n    )\n      editableElement.setAttribute(\"id\", root._generateUUID());\n\n    if (root.editableElement !== editableElement) {\n      //save changes to previous editableElement\n      if (root.editableElement !== null) {\n        root.editableElement.contentEditable = false;\n        root.editableElement = null;\n      }\n      //activate the editableElement\n      editableElement.parentNode.insertBefore(root, editableElement);\n      root.editableElement = editableElement;\n      root.canceled = editableElement.innerHTML;\n      root.editableElement.contentEditable = true;\n      root.controls = editableElement.getAttribute(\"id\");\n    }\n  }\n\n  /**\n   * Gets the updated selection.\n   */\n  getUpdatedSelection() {\n    console.log(\"selectionchange\");\n    let root = this;\n    root.selection =\n      root.editableElement === undefined || root.editableElement === null\n        ? null\n        : root.editableElement.getSelection\n        ? root.editableElement.getSelection()\n        : root._getRange();\n    this.buttons.forEach(button => {\n      button.selection = null;\n      button.selection = root.selection;\n    });\n  }\n\n  /**\n   * removes an editable region to the list of editableElements\n   *\n   * @param {object} an HTML object that can be edited\n   */\n  removeEditableRegion(editableElement) {\n    let root = this;\n    for (let i = 0; i < this.editableElements.length; i++) {\n      let item = this.editableElements[i];\n      if (item[0] === editableElement) {\n        item[0].removeEventListener(\"click\", e => {\n          root.editTarget(editableElement);\n        });\n        editableElement.removeEventListener(\"blur\", e => {\n          root.getUpdatedSelection();\n        });\n        editableElement.removeEventListener(\"mouseout\", e => {\n          root.getUpdatedSelection();\n        });\n        item[1].disconnect();\n        this.set(\"editableElements\", this.editableElements.splice(i, 1));\n      }\n    }\n  }\n\n  /**\n   * adds an editable region to the list of editableElements\n   *\n   * @param {object} an HTML object that can be edited\n   */\n  addEditableRegion(editableElement) {\n    let root = this,\n      observer = new MutationObserver(e => {\n        root.getUpdatedSelection();\n      });\n    editableElement.addEventListener(\"click\", e => {\n      root.editTarget(editableElement);\n    });\n    editableElement.addEventListener(\"blur\", e => {\n      root.getUpdatedSelection();\n    });\n    editableElement.addEventListener(\"mouseout\", e => {\n      root.getUpdatedSelection();\n    });\n    observer.observe(editableElement, {\n      attributes: false,\n      childList: true,\n      subtree: true,\n      characterData: false\n    });\n    root.push(\"editableElements\", [editableElement, observer]);\n  }\n\n  /**\n   * Adds a button to the toolbar\n   *\n   * @param {object} the child object in the config object\n   * @param {object} the parent object in the config object\n   */\n  _addButton(child, parent) {\n    let root = this,\n      button = document.createElement(child.type);\n    for (var key in child) {\n      button[key] = child[key];\n    }\n    button.setAttribute(\"class\", \"button\");\n    /*button.addEventListener(\"mousedown\", (e) => {\n      e.preventDefault();\n      root._preserveSelection(button);\n    });\n    button.addEventListener(\"keydown\", (e) => {\n      e.preventDefault();\n      root._preserveSelection(button);\n    });*/\n    button.addEventListener(\"deselect\", e => {\n      console.log(\"deselect\");\n      root._getRange().collapse(false);\n    });\n    parent.appendChild(button);\n    return button;\n  }\n\n  /**\n   * Generate a UUID\n   */\n  _generateUUID() {\n    return \"ss-s-s-s-sss\".replace(/s/g, this._uuidPart);\n  }\n  /**\n   * Gets the groups array for the dom-repeat.\n   *\n   * @param {object} the toolbar buttons config object\n   * @param {array} an array the buttons grouped by size\n   */\n  _getButtons(config) {\n    let root = this,\n      toolbar = root.$.toolbar,\n      more = this.$.morebutton,\n      max = 0,\n      sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n      temp = [];\n    toolbar.innerHTML = \"\";\n    config.forEach(item => {\n      if (item.type === \"button-group\") {\n        let group = document.createElement(\"div\");\n        group.setAttribute(\"class\", \"group\");\n        if (item.collapsedUntil !== undefined && item.collapsedUntil !== null)\n          group.setAttribute(\"collapsed-until\", item.collapsedUntil);\n        max = Math.max(max, sizes.indexOf(item.collapsedUntil));\n        item.buttons.forEach(button => {\n          max = Math.max(max, sizes.indexOf(button.collapsedUntil));\n          temp.push(root._addButton(button, group));\n        });\n        toolbar.appendChild(group);\n      } else {\n        max = Math.max(max, sizes.indexOf(item.collapsedUntil));\n        temp.push(root._addButton(item, toolbar));\n      }\n      toolbar.appendChild(more);\n      more.collapseMax = sizes[max];\n    });\n    return temp;\n  }\n\n  /**\n   * Normalizes selection data.\n   *\n   * @returns {object} the selection\n   */\n  _getRange() {\n    let sel = window.getSelection();\n    if (sel.getRangeAt && sel.rangeCount) {\n      return sel.getRangeAt(0);\n    } else if (sel) {\n      return sel;\n    } else false;\n  }\n\n  /**\n   * Preserves the selection when a button is pressed\n   *\n   * @param {object} the button\n   */\n  _preserveSelection() {\n    let sel = window.getSelection(),\n      temp = this.selection;\n    this.buttons.forEach(button => {\n      button.selection = temp;\n    });\n    sel.removeAllRanges();\n    sel.addRange(temp);\n  }\n\n  /**\n   * Toggles collapsed mode\n   */\n  _toggleMore(e) {\n    this.collapsed = !this.collapsed;\n  }\n\n  /**\n   * Generate UUID\n   */\n  _uuidPart() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n}\n\nexport { RichTextEditor };\n\nwindow.customElements.define(RichTextEditor.tag, RichTextEditor);\n"],"names":["styleElement","document","createElement","css","html","appendChild","register","RichTextEditorButton","PolymerElement","this","addEventListener","e","preventDefault","__a11y","$","button","selection","toggled","toggledCommand","execCommand","command","commandVal","toggles","queryCommandState","label","_regOrToggled","toggledLabel","undefined","innerHTML","tooltip","doTextOperation","toggledOff","toggledOn","icon","showTextLabel","name","type","value","notify","disabled","labelStyle","computed","readOnly","__label","toggledCommandVal","toggledIcon","validCommands","window","customElements","define","tag","RichTextEditorMoreButton","dispatchEvent","CustomEvent","detail","observer","reflectToAttribute","collapseMax","RichTextEditorPicker","parent","commonAncestorContainer","parentNode","temp","options","forEach","row","option","push","closest","join","tagName","toLowerCase","set","_getPickerOptions","data","allowNull","val","node","block","createTextNode","extractContents","insertNode","alt","style","items","cols","Math","sqrt","length","ceil","i","floor","col","_getOptionData","titleAsHtml","RichTextEditorHeadingPicker","blocks","RichTextEditorSymbolPicker","optionsSrc","symbolTypes","basePath","pathFromUrl","decodeURIComponent","src","location","_setOptions","bind","ESGlobalBridge","requestAvailability","instance","load","removeEventListener","optData","concat","symbols","richTextEditorPrompt","body","String","Object","target","fields","Array","__a11yconfirm","confirm","__a11ycancel","cancel","console","log","el","clearTarget","vals","__el","getAttribute","__selection","RichTextEditorLink","getComputedStyle","getPropertyValue","__popover","getSelectionData","setTarget","sel","link","setAttribute","Date","now","__style","backgroundColor","text","trim","firstChild","insertBefore","removeChild","property","title","description","inputMethod","prompt","RichTextEditor","root","ResponsiveUtility","element","attribute","relativeToParent","designMode","getUpdatedSelection","editableElement","canceled","editTarget","_generateUUID","contentEditable","controls","getSelection","_getRange","buttons","editableElements","item","disconnect","splice","MutationObserver","observe","attributes","childList","subtree","characterData","child","key","collapse","replace","_uuidPart","config","toolbar","more","morebutton","max","sizes","group","collapsedUntil","indexOf","_addButton","getRangeAt","rangeCount","removeAllRanges","addRange","collapsed","random","toString","substring"],"mappings":"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gBACA,gBACC,aAKE,MACH,iBACA,iBACC,UAKD,MACA,cACA,eACC,CACP,OACW,eACD,uBACG,CACT,SACa,YACH,aACC,YACD,2BAEV,SACa,YACH,aACC,YACD,6BAId,OACW,+BACD,uBACG,CACT,OACW,eACD,mCAEV,SACa,YACH,2BACC,gBACE,OACH,2BAEV,SACa,cACH,6BACC,mBACE,OACH,2BAEV,SACa,oBACH,4BACC,oBACD,6BAId,OACW,aACD,uBACG,CACT,SACa,YACH,aACC,cACC,sBACQ,qBACH,8BACC,iBACL,OACH,2BAId,OACW,4BACD,uBACG,CACT,SACa,WACH,oBACC,WACD,2BAEV,SACa,YACH,qBACC,YACD,2BAEV,SACa,aACH,sBACC,aACD,6BAId,gBACoB,WACT,iCACD,uBACG,CACT,SACa,iBACH,0BACC,qBACE,OACH,2BAEV,SACa,mBACH,4BACC,uBACE,OACH,6BAId,gBACoB,UACV,yBACC,4BACM,CAAC,gBACR,kCAEV,gBACoB,WACT,yBACD,uBACG,CACT,SACa,yBACH,oCACC,wBACE,OACH,2BAEV,SACa,2BACH,oCACC,0BACE,OACH,2BAEV,gBACoB,aACP,yBACG,mBACL,kBACD,2BACA,2BAEV,OACW,uBACD,sCACC,sBACE,cACH,2BAEV,OACW,uBACD,sCACC,uBACE,eACH,wCASN,MACF,gBACA,eACC,uBAKS,MACV,wBACA,cACC,oBAKQ,MACT,uBACA,eACC,qBAKO,MACR,sBACA,eACC,yBACa,kBAKN,MACR,sBACA,eACC,gBAKE,MACH,iBACA,eACC,aAKD,MACA,cACA,iBACC,sBACa,sCAWf,4BAoQX2C,OAAOC,eAAeC,OAAO4G,EAAe3G,IAAK2G"}