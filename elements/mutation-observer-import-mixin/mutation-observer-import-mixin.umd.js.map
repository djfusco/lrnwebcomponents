{"version":3,"file":"mutation-observer-import-mixin.umd.js","sources":["mutation-observer-import-mixin.umd.js"],"sourcesContent":["/**\n * Copyright 2020 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from 'lit-element/lit-element.js';\n\n/**\n * `mutation-observer-import-mixin`\n * `a SuperClass mixin that dynamically imports undefined custom element definitions`\n * @demo demo/index.html\n * @element mutation-observer-import-mixin\n */\nclass MutationObserverImportMixin extends LitElement {\n  \n  // render function\n  render() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n</style>\n<slot></slot>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    let props = {};\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  /**\n   * Convention we use\n   */\n  static get tag() {\n    return \"mutation-observer-import-mixin\";\n  }\n\n  /**\n   * HTMLElement\n   */\n  constructor() {\n    super();\n    \n  }\n  /**\n   * LitElement ready\n   */\n  firstUpdated(changedProperties) {\n    \n  }\n  /**\n   * LitElement life cycle - property changed\n   */\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      /* notify example\n      // notify\n      if (propName == 'format') {\n        this.dispatchEvent(\n          new CustomEvent(`${propName}-changed`, {\n            detail: {\n              value: this[propName],\n            }\n          })\n        );\n      }\n      */\n      /* observer example\n      if (propName == 'activeNode') {\n        this._activeNodeChanged(this[propName], oldValue);\n      }\n      */\n      /* computed example\n      if (['id', 'selected'].includes(propName)) {\n        this.__selectedChanged(this.selected, this.id);\n      }\n      */\n    });\n  }\n  \n}\ncustomElements.define(MutationObserverImportMixin.tag, MutationObserverImportMixin);\nexport { MutationObserverImportMixin };\n"],"names":["MutationObserverImportMixin","LitElement","html","props","Object","assign","changedProperties","forEach","oldValue","propName","customElements","define","tag"],"mappings":"09CAYMA,2YAAoCC,yDAI/BC,qDAcHC,EAAQ,sCAEVA,EAAQC,OAAOC,OAAOF,8BAEjBA,oCAOA,6EAaIG,oCAMLA,GACNA,EAAkBC,QAAQ,SAACC,EAAUC,eA2BzCC,eAAeC,OAAOX,EAA4BY,IAAKZ"}