{"version":3,"file":"a11y-gif-player.umd.js","sources":["a11y-gif-player.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\n/**\n * `a11y-gif-player`\n * plays gifs in an accessible way by having the user click to play their animation\n### Styling\n\n`<a11y-gif-player>` provides the following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--a11y-gif-player-border` | border around player/button | none\n`--a11y-gif-player-border-radius` | border-radius for player/button | 0\n`--a11y-gif-player-focus-border` | border-radius for player/button when hovered or focused | none\n`--a11y-gif-player-cursor` | cursor for player/button when hovered or focused | pointer\n`--a11y-gif-player-outline` | outline for player/button when hovered or focused | \n`--a11y-gif-player-disabled-cursor` | cursor for player/button when disabled | not-allowed\n`--a11y-gif-player-arrow-size` | arrow icon size | 30%\n`--a11y-gif-player-arrow-opacity` | default arrow icon opacity | 0.5\n`--a11y-gif-player-button-focus-opacity` | arrow icon opacity when hovered or focused | 0.7\n`--a11y-gif-player-button-color` | arrow icon color | #000000\n`--a11y-gif-player-arrow-border-color` | arrow icon border color | #ffffff\n`--a11y-gif-player-arrow-border-width` | arrow icon border width | 15px\n`--a11y-gif-player-button-text-color` | arrow icon text color | #ffffff\n`--a11y-gif-player-button-bg` | button background color when no static image | #cccccc\n *\n * @demo ./demo/index.html\n * @element a11y-gif-player\n */\nclass A11yGifPlayer extends SchemaBehaviors(LitElement) {\n  constructor() {\n    super();\n    this.alt = null;\n    this.disabled = false;\n    this.src = null;\n    this.tooltip = \"Toggle animation\";\n    this.tooltipPlaying = null;\n    this.srcWithoutAnimation = null;\n    this.__playing = false;\n    this.noImage = true;\n    import(\"@lrnwebcomponents/simple-tooltip/simple-tooltip.js\");\n    import(\"@polymer/iron-image/iron-image.js\");\n  }\n  /**\n   * LitElement render styles\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: inline-flex;\n        }\n        *[hidden] {\n          display: none;\n        }\n        button {\n          padding: 0;\n          display: flex;\n          align-items: stretch;\n          position: relative;\n          width: auto;\n          border: var(--a11y-gif-player-border, none);\n          border-radius: var(--a11y-gif-player-border-radius, 0);\n        }\n        button:active,\n        button:focus,\n        button:hover {\n          border: var(--a11y-gif-player-focus-border, none);\n          cursor: var(--a11y-gif-player-cursor, pointer);\n          outline: var(--a11y-gif-player-outline, 3px solid);\n        }\n        button[disabled] {\n          cursor: var(--a11y-gif-player-disabled-cursor, not-allowed);\n        }\n        button > * {\n          width: 100%;\n          min-width: 100%;\n          min-height: 100%;\n          flex: 1 1 100%;\n        }\n        div {\n          display: flex;\n          align-items: center;\n          flex-direction: column;\n          position: absolute;\n        }\n        svg {\n          flex: 1 1 100%;\n          width: var(--a11y-gif-player-arrow-size, 30%);\n          height: var(--a11y-gif-player-arrow-size, 30%);\n        }\n        g {\n          opacity: var(--a11y-gif-player-arrow-opacity, 0.5);\n        }\n        button:not([disabled]):active g,\n        button:not([disabled]):hover g,\n        button:not([disabled]):focus g {\n          opacity: var(--a11y-gif-player-button-focus-opacity, 0.7);\n        }\n        polygon {\n          fill: var(--a11y-gif-player-button-color, #000000);\n          stroke: var(--a11y-gif-player-arrow-border-color, #ffffff);\n          stroke-width: var(--a11y-gif-player-arrow-border-width, 15px);\n        }\n        text {\n          fill: var(--a11y-gif-player-button-text-color, #ffffff);\n        }\n        img {\n          position: absolute;\n        }\n        button[aria-pressed=\"true\"] svg,\n        button[aria-pressed=\"true\"] img {\n          opacity: 0;\n        }\n        button[data-no-image] .button-bg {\n          background-color: var(--a11y-gif-player-button-bg, #cccccc);\n        }\n        button[aria-pressed=\"true\"][data-no-image] .button-bg {\n          background-color: transparent;\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n        }\n      `\n    ];\n  }\n  render() {\n    return html`\n      <button\n        id=\"button\"\n        aria-controls=\"gif\"\n        aria-pressed=\"${this.__playing ? \"true\" : \"false\"}\"\n        @click=\"${this.toggle}\"\n        ?data-no-image=\"${this.noImage}\"\n        ?disabled=\"${this.disabled || !this.src}\"\n      >\n        <iron-image id=\"gif\" src=\"${this.src}\" ?hidden=\"${!this.src}\">\n        </iron-image>\n        ${!this.noImage\n          ? html`\n              <img\n                id=\"static\"\n                loading=\"lazy\"\n                alt=\"${this.alt}\"\n                src=\"${this.srcWithoutAnimation}\"\n              />\n            `\n          : html``}\n        <div class=\"button-bg\">\n          <svg\n            id=\"svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 200 200\"\n          >\n            <g>\n              <polygon points=\"30,20 30,180 170,100\"></polygon>\n              <text x=\"50\" y=\"115\" font-size=\"40px\">GIF</text>\n            </g>\n          </svg>\n        </div>\n      </button>\n\n      <simple-tooltip for=\"button\" offset=\"30\" animation-delay=\"0\">\n        ${this.__playing && this.tooltipPlaying\n          ? this.tooltipPlaying\n          : this.tooltip}\n      </simple-tooltip>\n    `;\n  }\n  /**\n   * Convention\n   */\n  static get tag() {\n    return \"a11y-gif-player\";\n  }\n  /**\n   * LitElement / popular convention\n   */\n  static get properties() {\n    return {\n      ...super.properties,\n      /**\n       * Alt text of gif\n       */\n      alt: {\n        type: String\n      },\n      /**\n       * Whether button is disabled\n       */\n      disabled: {\n        type: Boolean\n      },\n      /**\n       * Source of animated gif\n       */\n      src: {\n        type: String\n      },\n      /**\n       * Source of static version of image\n       */\n      srcWithoutAnimation: {\n        type: String,\n        attribute: \"src-without-animation\"\n      },\n      /**\n       * default tooltip\n       */\n      tooltip: {\n        type: String\n      },\n      /**\n       * tooltip when playing\n       */\n      tooltipPlaying: {\n        type: String,\n        attribute: \"tooltip-playing\"\n      },\n      /**\n       * whether GIF is playing\n       */\n      __playing: {\n        type: Boolean\n      },\n      /**\n       * Boolean for if theres a source image or not\n       */\n      noImage: {\n        type: Boolean\n      }\n    };\n  }\n  /**\n   * LitElement properties updated\n   */\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"srcWithoutAnimation\") {\n        if (this[propName] != null && this[propName] != \"\") {\n          this.noImage = false;\n        } else {\n          this.noImage = true;\n        }\n      }\n    });\n  }\n  /**\n   * plays the animation regarless of previous state\n   */\n  play() {\n    this.__playing = true;\n  }\n  /**\n   * stops the animation regarless of previous state\n   */\n  stop() {\n    this.__playing = false;\n  }\n  /**\n   * toggles the animation based on current state\n   */\n  toggle() {\n    if (this.__playing) {\n      this.stop();\n    } else {\n      this.play();\n    }\n  }\n  /**\n   * deprecated. toggles the animation based on current state\n   */\n  toggleAnimation() {\n    if (this.__playing) {\n      this.stop();\n    } else {\n      this.play();\n    }\n  }\n  /**\n   * HAX\n   */\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Accessible GIF\",\n        description: \"Makes animated GIFs accessible.\",\n        icon: \"gif\",\n        color: \"grey\",\n        groups: [\"Images\", \"Media\"],\n        handles: [\n          {\n            type: \"image\",\n            source: \"src\",\n            source2: \"srcWithoutAnimation\",\n            alt: \"alt\"\n          }\n        ],\n        meta: {\n          author: \"ELMS:LN\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"src\",\n            title: \"Animated GIF\",\n            description: \"The URL to your animated GIF.\",\n            inputMethod: \"textfield\",\n            icon: \"link\",\n            validationType: \"url\",\n            required: true\n          },\n          {\n            property: \"srcWithoutAnimation\",\n            title: \"Still Image\",\n            description: \"The URL to a still image version of your GIF.\",\n            inputMethod: \"textfield\",\n            icon: \"link\",\n            validationType: \"url\",\n            required: true\n          },\n          {\n            property: \"alt\",\n            title: \"Alt Text\",\n            description: \"Alternative text for the image.\",\n            inputMethod: \"textfield\",\n            icon: \"accessibility\",\n            required: true\n          }\n        ],\n        configure: [\n          {\n            property: \"src\",\n            title: \"Animated GIF\",\n            description: \"The URL to your animated GIF.\",\n            inputMethod: \"haxupload\",\n            icon: \"link\",\n            validationType: \"url\",\n            required: true\n          },\n          {\n            property: \"srcWithoutAnimation\",\n            title: \"Still Image\",\n            description: \"The URL to a still image version of your GIF.\",\n            inputMethod: \"haxupload\",\n            icon: \"link\",\n            validationType: \"url\",\n            required: true\n          },\n          {\n            property: \"alt\",\n            title: \"Alt Text\",\n            description: \"Alternative text for the image.\",\n            inputMethod: \"alt\",\n            icon: \"accessibility\",\n            required: true\n          }\n        ],\n        advanced: []\n      }\n    };\n  }\n}\nwindow.customElements.define(A11yGifPlayer.tag, A11yGifPlayer);\nexport { A11yGifPlayer };\n"],"names":["A11yGifPlayer","alt","disabled","src","tooltip","tooltipPlaying","srcWithoutAnimation","__playing","noImage","SchemaBehaviors","LitElement","css","type","String","Boolean","attribute","canScale","canPosition","canEditSource","gizmo","title","description","icon","color","groups","handles","source","source2","meta","author","settings","quick","property","inputMethod","validationType","required","configure","advanced","html","this","toggle","changedProperties","forEach","oldValue","propName","_this2","stop","play","window","customElements","define","tag"],"mappings":"80KAkCMA,yKAGGC,IAAM,OACNC,UAAW,IACXC,IAAM,OACNC,QAAU,qBACVC,eAAiB,OACjBC,oBAAsB,OACtBC,WAAY,IACZC,SAAU,SACR,6DACA,6RAZiBC,kBAAgBC,yDAkBjC,CACLC,8CAgIK,sbAWLV,IAAK,CACHW,KAAMC,QAKRX,SAAU,CACRU,KAAME,SAKRX,IAAK,CACHS,KAAMC,QAKRP,oBAAqB,CACnBM,KAAMC,OACNE,UAAW,yBAKbX,QAAS,CACPQ,KAAMC,QAKRR,eAAgB,CACdO,KAAMC,OACNE,UAAW,mBAKbR,UAAW,CACTK,KAAME,SAKRN,QAAS,CACPI,KAAME,uDAsDH,CACLE,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLC,MAAO,iBACPC,YAAa,kCACbC,KAAM,MACNC,MAAO,OACPC,OAAQ,CAAC,SAAU,SACnBC,QAAS,CACP,CACEb,KAAM,QACNc,OAAQ,MACRC,QAAS,sBACT1B,IAAK,QAGT2B,KAAM,CACJC,OAAQ,YAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,MACVZ,MAAO,eACPC,YAAa,gCACbY,YAAa,YACbX,KAAM,OACNY,eAAgB,MAChBC,UAAU,GAEZ,CACEH,SAAU,sBACVZ,MAAO,cACPC,YAAa,gDACbY,YAAa,YACbX,KAAM,OACNY,eAAgB,MAChBC,UAAU,GAEZ,CACEH,SAAU,MACVZ,MAAO,WACPC,YAAa,kCACbY,YAAa,YACbX,KAAM,gBACNa,UAAU,IAGdC,UAAW,CACT,CACEJ,SAAU,MACVZ,MAAO,eACPC,YAAa,gCACbY,YAAa,YACbX,KAAM,OACNY,eAAgB,MAChBC,UAAU,GAEZ,CACEH,SAAU,sBACVZ,MAAO,cACPC,YAAa,gDACbY,YAAa,YACbX,KAAM,OACNY,eAAgB,MAChBC,UAAU,GAEZ,CACEH,SAAU,MACVZ,MAAO,WACPC,YAAa,kCACbY,YAAa,MACbX,KAAM,gBACNa,UAAU,IAGdE,SAAU,kDA3OPC,WAIaC,KAAKhC,UAAY,OAAS,QAChCgC,KAAKC,OACGD,KAAK/B,QACV+B,KAAKrC,WAAaqC,KAAKpC,IAERoC,KAAKpC,KAAkBoC,KAAKpC,IAErDoC,KAAK/B,QASJ8B,YARAA,WAIWC,KAAKtC,IACLsC,KAAKjC,qBAmBlBiC,KAAKhC,WAAagC,KAAKlC,eACrBkC,KAAKlC,eACLkC,KAAKnC,yCAuEPqC,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,GACnB,uBAAZA,IACoB,MAAlBC,EAAKD,IAAuC,IAAlBC,EAAKD,GACjCC,EAAKrC,SAAU,EAEfqC,EAAKrC,SAAU,yCAShBD,WAAY,sCAMZA,WAAY,mCAMbgC,KAAKhC,eACFuC,YAEAC,iDAOHR,KAAKhC,eACFuC,YAEAC,4CA2FXC,OAAOC,eAAeC,OAAOlD,EAAcmD,IAAKnD"}