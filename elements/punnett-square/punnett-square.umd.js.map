{"version":3,"file":"punnett-square.umd.js","sources":["punnett-square.umd.js"],"sourcesContent":["/**\n * Copyright 2019 PSU\n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport \"@polymer/paper-input/paper-input.js\";\n\n/**\n * `punnett-square`\n * @element punnett-square\n * @lit-element\n * @demo demo/index.html\n */\nclass PunnettSquare extends LitElement {\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"punnett-square\";\n  }\n\n  static get properties() {\n    return {\n      variant1: { type: String },\n      variant2: { type: String },\n      editable: { type: Boolean }\n    };\n  }\n\n  // life cycle\n  constructor() {\n    super();\n    this.variant1 = \"\";\n    this.variant2 = \"\";\n    this.editable = false;\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  /**\n   * Ensures that the value is a multidimensional array\n   */\n  __ensureArray(value) {\n    let toplevel =\n      typeof value === \"string\" ? value.split(\",\").map(i => i.trim()) : [];\n    return toplevel.map(i =>\n      typeof i === \"string\" ? i.split(\"\").map(i => i.trim()) : []\n    );\n  }\n\n  render() {\n    let value1 = this.__ensureArray(this.variant1);\n    let value2 = this.__ensureArray(this.variant2);\n\n    return html`\n      <style>\n        :host {\n          display: block;\n          --punnett-square-table-border: 1px solid black;\n          --punnett-square-table-padding: 1em;\n          --punnett-square-input-font-size: 2em;\n          --punnett-square-input-text-align: center;\n        }\n\n        table {\n          border-collapse: var(--punnett-square-table-border-collapse, collapse);\n          width: var(--punnett-square-table-width, 100%);\n          border: var(--punnett-square-table-border);\n        }\n\n        th {\n          border: var(--punnett-square-th-border, var(--punnett-square-table-border));\n          padding: var(--punnett-square-th-padding, var(--punnett-square-table-padding));\n        }\n\n        td {\n          border: var(--punnett-square-td-border, var(--punnett-square-table-border));\n          text-align: var(--punnett-square-table-text-align, center);\n          padding: var(--punnett-square-td-padding, var(--punnett-square-table-padding));\n        }\n\n        #inputs {\n          display: var(--punnett-square-inputs-display, flex);\n          align-items: var(--punnett-square-inputs-align-items, center);\n        }\n\n        .input {\n          font-size: var(--punnett-square-input-font-size);\n          text-align: var(--punnett-square-input-text-align);\n        }\n\n        paper-input {\n          --paper-input-container-input: {\n            font-size: var(--punnett-square-paper-input-font-size, --punnett-square-input-font-size);\n            text-align: var(--punnett-square-paper-input-text-align, --punnett-square-input-text-align);\n          }\n        }\n      </style>\n      <div id=\"inputs\">\n        Variant1: <div class=\"input\">${\n          this.editable\n            ? html`\n                <paper-input\n                  value=\"${this.variant1}\"\n                  @value-changed=${e => (this.variant1 = e.detail.value)}\n                ></paper-input>\n              `\n            : html`\n                ${this.variant1}\n              `\n        }</div>\n        Variant2: <div class=\"input\">${\n          this.editable\n            ? html`\n                <paper-input\n                  value=\"${this.variant2}\"\n                  @value-changed=${e => (this.variant2 = e.detail.value)}\n                ></paper-input>\n              `\n            : html`\n                ${this.variant2}\n              `\n        }</div>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th></th>\n            ${value1.map(\n              allele1 =>\n                html`\n                  ${allele1.map(\n                    i =>\n                      html`\n                        <th>${i}</th>\n                      `\n                  )}\n                `\n            )}\n          </tr>\n        <tbody>\n          ${value2.map((allele2, index) =>\n            allele2.map(\n              allele =>\n                html`\n                  <tr>\n                    <th>${allele}</th>\n                    ${value1.map(v1 =>\n                      v1.map(\n                        allele1 =>\n                          html`\n                            <td>${allele1}${allele}</td>\n                          `\n                      )\n                    )}\n                  </tr>\n                `\n            )\n          )}\n        </tbody>\n        </thead>\n      </table>\n    `;\n  }\n}\ncustomElements.define(PunnettSquare.tag, PunnettSquare);\n\nexport { PunnettSquare };\n"],"names":["PunnettSquare","variant1","variant2","editable","LitElement","type","String","Boolean","value","split","map","i","trim","value1","this","__ensureArray","value2","html","e","_this2","detail","allele1","allele2","index","allele","v1","customElements","define","tag"],"mappings":"8+IAaMA,yKAoBGC,SAAW,KACXC,SAAW,KACXC,UAAW,gPAtBQC,wDAMjB,0DAIA,CACLH,SAAU,CAAEI,KAAMC,QAClBJ,SAAU,CAAEG,KAAMC,QAClBH,SAAU,CAAEE,KAAME,yJAsBRC,UAEO,iBAAVA,EAAqBA,EAAMC,MAAM,KAAKC,IAAI,SAAAC,UAAKA,EAAEC,SAAU,IACpDF,IAAI,SAAAC,SACL,iBAANA,EAAiBA,EAAEF,MAAM,IAAIC,IAAI,SAAAC,UAAKA,EAAEC,SAAU,iDAKvDC,EAASC,KAAKC,cAAcD,KAAKb,UACjCe,EAASF,KAAKC,cAAcD,KAAKZ,iBAE9Be,WA8CDH,KAAKX,SACDc,WAEaH,KAAKb,SACG,SAAAiB,UAAMC,EAAKlB,SAAWiB,EAAEE,OAAOZ,QAGpDS,WACIH,KAAKb,UAIba,KAAKX,SACDc,WAEaH,KAAKZ,SACG,SAAAgB,UAAMC,EAAKjB,SAAWgB,EAAEE,OAAOZ,QAGpDS,WACIH,KAAKZ,UAQTW,EAAOH,IACP,SAAAW,UACEJ,WACII,EAAQX,IACR,SAAAC,UACEM,WACQN,QAOlBK,EAAON,IAAI,SAACY,EAASC,UACrBD,EAAQZ,IACN,SAAAc,UACEP,WAEUO,EACJX,EAAOH,IAAI,SAAAe,UACXA,EAAGf,IACD,SAAAW,UACEJ,WACQI,EAAUG,sBAc5CE,eAAeC,OAAO3B,EAAc4B,IAAK5B"}