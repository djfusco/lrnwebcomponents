{"version":3,"file":"media-behaviors.umd.js","sources":["media-behaviors.umd.js"],"sourcesContent":["// ensure MediaBehaviors exists\nwindow.MediaBehaviors = window.MediaBehaviors || {};\n/**\n * `MediaBehaviors.Video` provides some helper functions for working with video\n * from multiple sources. It helps resolve a video by type and currently supports\n * youtube, vimeo, and a few other sources and helps to determine if we need\n * an iframe to display the media or a local `<video>` tag.\n *\n * This also provides a powerful little utility to clean up embedded\n * URLs that reference popular media sources in order to make sure\n * that their embed URLs are structured correctly. This is especially\n * useful for allowing users to copy and paste links from youtube's URL\n * bar yet actually transform that address into a cookie free embed that\n * strips off the related videos and other options.\n *\n * @polymerBehavior MediaBehaviors.Video\n **/\nwindow.MediaBehaviors.Video = {\n  /**\n   * Compute iframe or video tag for implementation.\n   */\n  _sourceIsIframe(source) {\n    let type = this.getVideoType(source);\n    if (type == \"local\") {\n      return false;\n    } else {\n      return true;\n    }\n  },\n  /**\n   * Check source of the video, potentially correcting bad links.\n   */\n  cleanVideoSource(input, type) {\n    // ensure we are NOT local and do a sanity check\n    if (type != \"local\" && typeof input === \"string\") {\n      // strip off the ? modifier for youtube/vimeo so we can build ourselves\n      var tmp = input.split(\"?\");\n      var v = \"\";\n      input = tmp[0];\n      if (tmp.length == 2) {\n        let tmp2 = tmp[1].split(\"&\"),\n          args = tmp2[0].split(\"=\"),\n          qry = Array.isArray(tmp2.shift())\n            ? tmp2.shift().join(\"\")\n            : tmp2.shift();\n        if (args[0] == \"v\") {\n          let q = qry !== undefined && qry !== \"\" ? \"?\" + qry : \"\";\n          v = args[1] + q;\n        }\n      }\n      // link to the vimeo video instead of the embed player address\n      if (\n        input.indexOf(\"player.vimeo.com\") == -1 &&\n        input.indexOf(\"vimeo.com\") != -1\n      ) {\n        // normalize what the API will return since it is API based\n        // and needs cleaned up for front-end\n        if (input.indexOf(\"/videos/\") != -1) {\n          input = input.replace(\"/videos/\", \"/\");\n        }\n        return input.replace(\"vimeo.com/\", \"player.vimeo.com/video/\");\n      }\n      // copy and paste from the URL\n      else if (input.indexOf(\"youtube.com/watch\") != -1) {\n        return input.replace(\"youtube.com/watch\", \"youtube.com/embed/\") + v;\n      }\n      // copy and paste from the URL\n      else if (input.indexOf(\"youtube-no-cookie.com/\") != -1) {\n        return input.replace(\"youtube-no-cookie.com/\", \"youtube.com/\") + v;\n      }\n      // weird share-ly style version\n      else if (input.indexOf(\"youtu.be\") != -1) {\n        return input.replace(\"youtu.be/\", \"www.youtube.com/embed/\") + v;\n      }\n      // copy and paste from the URL for sketchfab\n      else if (\n        input.indexOf(\"sketchfab.com\") != -1 &&\n        input.indexOf(\"/embed\") == -1\n      ) {\n        return input + \"/embed\";\n      }\n      // copy and paste from the URL for sketchfab\n      else if (\n        input.indexOf(\"dailymotion.com\") != -1 &&\n        input.indexOf(\"/embed\") == -1\n      ) {\n        return input.replace(\"/video/\", \"/embed/video/\");\n      }\n    }\n    return input;\n  },\n  /**\n   * Figure out the type of video based on source.\n   */\n  getVideoType(source) {\n    let localFormats = [\n        \"aac\",\n        \"flac\",\n        \"mov\",\n        \"mp3\",\n        \"mp4\",\n        \"oga\",\n        \"ogg\",\n        \"ogv\",\n        \"wav\",\n        \"webm\"\n      ],\n      isLocal = false;\n    // some common ones\n    if (source.indexOf(\"vimeo\") != -1) {\n      return \"vimeo\";\n    } else if (\n      source.indexOf(\"youtube\") != -1 ||\n      source.indexOf(\"youtu.be\") != -1\n    ) {\n      return \"youtube\";\n    } else if (source.indexOf(\"sketchfab.com\") != -1) {\n      return \"sketchfab\";\n    } else if (source.indexOf(\"dailymotion.com\") != -1) {\n      return \"dailymotion\";\n    }\n    for (let i = 0; i < localFormats.length; i++) {\n      if (!isLocal && source.toLowerCase().indexOf(\".\" + localFormats[i]) > -1)\n        isLocal = true;\n    }\n    // see if it's a direct file reference, otherwise we'll assume it's external\n    if (isLocal) {\n      return \"local\";\n    } else {\n      // not sure but iframe it for funzies\n      return \"external\";\n    }\n  }\n};\n\nexport const MediaBehaviorsVideo = function(SuperClass) {\n  return class extends SuperClass {\n    _sourceIsIframe(source) {\n      let type = this.getVideoType(source);\n      if (type == \"local\") {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    /**\n     * Check source of the video, potentially correcting bad links.\n     */\n    cleanVideoSource(input, type) {\n      if (type != \"local\") {\n        // strip off the ? modifier for youtube/vimeo so we can build ourselves\n        var tmp = input.split(\"?\");\n        var v = \"\";\n        input = tmp[0];\n        if (tmp.length == 2) {\n          let tmp2 = tmp[1].split(\"&\"),\n            args = tmp2[0].split(\"=\"),\n            qry = Array.isArray(tmp2.shift())\n              ? tmp2.shift().join(\"\")\n              : tmp2.shift();\n          if (args[0] == \"v\") {\n            let q = qry !== undefined && qry !== \"\" ? \"?\" + qry : \"\";\n            v = args[1] + q;\n          }\n        }\n        // link to the vimeo video instead of the embed player address\n        if (\n          input.indexOf(\"player.vimeo.com\") == -1 &&\n          input.indexOf(\"vimeo.com\") != -1\n        ) {\n          // normalize what the API will return since it is API based\n          // and needs cleaned up for front-end\n          if (input.indexOf(\"/videos/\") != -1) {\n            input = input.replace(\"/videos/\", \"/\");\n          }\n          return input.replace(\"vimeo.com/\", \"player.vimeo.com/video/\");\n        }\n        // copy and paste from the URL\n        else if (input.indexOf(\"youtube.com/watch\") != -1) {\n          return input.replace(\"youtube.com/watch\", \"youtube.com/embed/\") + v;\n        }\n        // copy and paste from the URL\n        else if (input.indexOf(\"youtube-no-cookie.com/\") != -1) {\n          return input.replace(\"youtube-no-cookie.com/\", \"youtube.com/\") + v;\n        }\n        // weird share-ly style version\n        else if (input.indexOf(\"youtu.be\") != -1) {\n          return input.replace(\"youtu.be/\", \"www.youtube.com/embed/\") + v;\n        }\n        // copy and paste from the URL for sketchfab\n        else if (\n          input.indexOf(\"sketchfab.com\") != -1 &&\n          input.indexOf(\"/embed\") == -1\n        ) {\n          return input + \"/embed\";\n        }\n        // copy and paste from the URL for sketchfab\n        else if (\n          input.indexOf(\"dailymotion.com\") != -1 &&\n          input.indexOf(\"/embed\") == -1\n        ) {\n          return input.replace(\"/video/\", \"/embed/video/\");\n        }\n      }\n      return input;\n    }\n    /**\n     * Figure out the type of video based on source.\n     */\n    getVideoType(source) {\n      let localFormats = [\n          \"aac\",\n          \"flac\",\n          \"mov\",\n          \"mp3\",\n          \"mp4\",\n          \"oga\",\n          \"ogg\",\n          \"ogv\",\n          \"wav\",\n          \"webm\"\n        ],\n        isLocal = false;\n      // some common ones\n      if (source.indexOf(\"vimeo\") != -1) {\n        return \"vimeo\";\n      } else if (\n        source.indexOf(\"youtube\") != -1 ||\n        source.indexOf(\"youtu.be\") != -1\n      ) {\n        return \"youtube\";\n      } else if (source.indexOf(\"sketchfab.com\") != -1) {\n        return \"sketchfab\";\n      } else if (source.indexOf(\"dailymotion.com\") != -1) {\n        return \"dailymotion\";\n      }\n      for (let i = 0; i < localFormats.length; i++) {\n        if (\n          !isLocal &&\n          source.toLowerCase().indexOf(\".\" + localFormats[i]) > -1\n        )\n          isLocal = true;\n      }\n      // see if it's a direct file reference, otherwise we'll assume it's external\n      if (isLocal) {\n        return \"local\";\n      } else {\n        // not sure but iframe it for funzies\n        return \"external\";\n      }\n    }\n  };\n};\n"],"names":["window","MediaBehaviors","Video","_sourceIsIframe","source","this","getVideoType","cleanVideoSource","input","type","tmp","split","v","length","tmp2","args","qry","Array","isArray","shift","join","q","undefined","indexOf","replace","localFormats","isLocal","i","toLowerCase","SuperClass"],"mappings":"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"}