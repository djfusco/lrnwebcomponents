{"version":3,"file":"simple-drawer.umd.js","sources":["simple-drawer.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, css } from \"lit-element/lit-element.js\";\nimport { SimpleColors } from \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n/**\n * @deprecatedApply - required for @apply / invoking @apply css var convention\n */\nimport \"@polymer/polymer/lib/elements/custom-style.js\";\n\nimport \"@polymer/app-layout/app-drawer/app-drawer.js\";\nimport \"@polymer/neon-animation/neon-animation.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\n// register globally so we can make sure there is only one\nwindow.SimpleDrawer = window.SimpleDrawer || {};\n// request if this exists. This helps invoke the element existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same drawer\nwindow.SimpleDrawer.requestAvailability = () => {\n  if (!window.SimpleDrawer.instance) {\n    window.SimpleDrawer.instance = document.createElement(\"simple-drawer\");\n    document.body.appendChild(window.SimpleDrawer.instance);\n  }\n  return window.SimpleDrawer.instance;\n};\n/**\n * `simple-drawer`\n * `a singleton drawer element`\n * @demo demo/index.html\n * @element simple-drawer\n */\nclass SimpleDrawer extends SimpleColors {\n  \n  //styles function\n  static get styles() {\n    return  [\n      ...super.styles,\n      css`\n:host {\n  display: block;\n  z-index: 1000;\n}\n:host([hidden]) {\n  display: none;\n}\n:host div::slotted(*) {\n  font-size: 14px;\n}\n\n.content {\n  text-align: left;\n  padding: 8px 24px;\n}\n\n.top ::slotted(*) {\n  font-size: 24px;\n  margin: 0;\n  padding: 0 15px;\n  height: 40px;\n  line-height: 48px;\n}\n\n#close {\n  position: absolute;\n  right: 8px;\n  top: 8px;\n  padding: 4px;\n  margin: 0;\n  text-transform: none;\n  float: right;\n  font-size: 12px;\n  color: var(--simple-drawer-header-color, #ffffff);\n  background-color: transparent;\n  min-width: unset;\n}\n\n#close iron-icon {\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin-right: 2px;\n}\n\n.top {\n  font-size: 24px;\n  margin: 0 0 8px 0;\n  padding: 0 16px;\n  height: 64px;\n  line-height: 64px;\n  display: flex;\n  text-align: left;\n  justify-content: space-between;\n  background-color: var(--simple-drawer-header-background, #20427b);\n  color: var(--simple-drawer-header-color, #ffffff);\n}\n\n.top h2 {\n  flex: auto;\n  color: var(--simple-drawer-header-color, #ffffff);\n  font-size: 24px;\n  padding: 0;\n  line-height: 32px;\n  margin: 8px;\n}\n      `\n    ];\n  }\n  // LitElement\n  render() {\n    return html`\n\n<custom-style>\n  <style>\n  app-drawer {\n    --app-drawer-content-container: {\n      padding: 0;\n      overflow-y: scroll;\n      position: fixed;\n      color: var(--simple-drawer-color, #222222);\n      background-color: var(--simple-drawer-background-color, #FFFFFF);\n    }\n  }\n  :host ::slotted(*) {\n    @apply --simple-drawer-content;\n  }\n\n  .content {\n    @apply --simple-drawer-content-container;\n  }\n  .top {\n    @apply --simple-drawer-header;\n  }\n\n  .top h2 {\n    @apply --simple-drawer-heading;\n  }\n  </style>\n</custom-style>\n<app-drawer tabindex=\"0\" id=\"drawer\" ?opened=\"${this.opened}\" @opened-changed=\"${this.__openedChanged}\" .align=\"${this.align}\" role=\"dialog\">\n  <div class=\"wrapper\">\n    <div class=\"top\">\n      ${this.title ? html`<h2>${this.title}</h2>` : ''}\n      <slot name=\"header\"></slot>\n    </div>\n    <div class=\"content\">\n      <slot name=\"content\"></slot>\n    </div>\n    <paper-button id=\"close\" @click=\"${this.close}\">\n      <iron-icon icon=\"${this.closeIcon}\"></iron-icon> ${this.closeLabel}\n    </paper-button>\n  </div>\n</app-drawer>`;\n  }\n\n  // properties available to the custom element for data binding\n    static get properties() {\n    return {\n  \n  ...super.properties,\n  \n  /**\n   * heading / label of the modal\n   */\n  \"title\": {\n    \"name\": \"title\",\n    \"type\": String\n  },\n  /**\n   * alignment of the drawer\n   */\n  \"align\": {\n    \"name\": \"align\",\n    \"type\": String\n  },\n  /**\n   * open state\n   */\n  \"opened\": {\n    \"name\": \"opened\",\n    \"type\": Boolean,\n    \"reflect\": true\n  },\n  /**\n   * Close label\n   */\n  \"closeLabel\": {\n    \"name\": \"closeLabel\",\n    \"type\": String\n  },\n  /**\n   * Close icon\n   */\n  \"closeIcon\": {\n    \"name\": \"closeIcon\",\n    \"type\": String\n  },\n  /**\n   * The element that invoked this. This way we can track our way back accessibly\n   */\n  \"invokedBy\": {\n    \"name\": \"invokedBy\",\n    \"type\": Object\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-drawer\";\n  }\n  /**\n   * HTMLElement\n   */\n  constructor() {\n    super();\n    this.title = \"\";\n    this.align = \"left\";\n    this.opened = false;\n    this.closeLabel = \"Close\";\n    this.closeIcon = \"icons:cancel\";\n  }\n  /**\n   * LitElement life cycle - ready\n   */\n  firstUpdated(changedProperties) {\n    window.addEventListener(\"simple-drawer-hide\", this.close.bind(this));\n    window.addEventListener(\"simple-drawer-show\", this.showEvent.bind(this));\n  }\n  /**\n   * LitElement life cycle - properties changed callback\n   */\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"opened\") {\n        this._openedChanged(this[propName], oldValue);\n      }\n    });\n  }\n  /**\n   * show event call to open the drawer and display it's content\n   */\n  showEvent(e) {\n    // if we're already opened and we get told to open again....\n    // swap out the contents\n    if (this.opened) {\n      // wipe the slot of our drawer\n      while (this.firstChild !== null) {\n        this.removeChild(this.firstChild);\n      }\n      setTimeout(() => {\n        this.show(\n          e.detail.title,\n          e.detail.elements,\n          e.detail.invokedBy,\n          e.detail.align,\n          e.detail.clone\n        );\n      }, 100);\n    } else {\n      this.show(\n        e.detail.title,\n        e.detail.elements,\n        e.detail.invokedBy,\n        e.detail.align,\n        e.detail.size,\n        e.detail.clone\n      );\n    }\n  }\n  /**\n   * Show the drawer and display the material\n   */\n  show(\n    title,\n    elements,\n    invokedBy,\n    align = \"left\",\n    size = \"256px\",\n    clone = false\n  ) {\n    this.invokedBy = invokedBy;\n    this.title = title;\n    this.align = align;\n    // @todo this is a bit of a hack specific to polymer elements in app- world\n    this.shadowRoot\n      .querySelector(\"#drawer\")\n      .updateStyles({ \"--app-drawer-width\": size });\n    let element;\n    // append element areas into the appropriate slots\n    // ensuring they are set if it wasn't previously\n    let slots = [\"header\", \"content\"];\n    for (var i in slots) {\n      if (elements[slots[i]]) {\n        if (clone) {\n          element = elements[slots[i]].cloneNode(true);\n        } else {\n          element = elements[slots[i]];\n        }\n        element.setAttribute(\"slot\", slots[i]);\n        this.appendChild(element);\n      }\n    }\n    // minor delay to help the above happen prior to opening\n    setTimeout(() => {\n      this.opened = true;\n      // fake a resize event to make contents happy\n      window.dispatchEvent(new Event(\"resize\"));\n    }, 100);\n  }\n  /**\n   * check state and if we should clean up on close.\n   * This keeps the DOM tiddy and allows animation to happen gracefully.\n   */\n  animationEnded(e) {\n    // wipe the slot of our drawer\n    this.title = \"\";\n    while (this.firstChild !== null) {\n      this.removeChild(this.firstChild);\n    }\n    if (this.invokedBy) {\n      async.microTask.run(() => {\n        setTimeout(() => {\n          this.invokedBy.focus();\n        }, 500);\n      });\n    }\n  }\n  /**\n   * Close the drawer and do some clean up\n   */\n  close() {\n    this.opened = false;\n  }\n  // event bubbling up from drawer\n  __openedChanged(e) {\n    this.opened = e.detail.value;\n  }\n  // Observer opened for changes\n  _openedChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined && !newValue) {\n      this.animationEnded();\n      const evt = new CustomEvent(\"simple-drawer-closed\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          opened: false,\n          invokedBy: this.invokedBy\n        }\n      });\n      this.dispatchEvent(evt);\n    } else if (newValue) {\n      const evt = new CustomEvent(\"simple-drawer-opened\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          opened: true,\n          invokedBy: this.invokedBy\n        }\n      });\n      this.dispatchEvent(evt);\n    }\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    window.removeEventListener(\"simple-drawer-hide\", this.close.bind(this));\n    window.removeEventListener(\"simple-drawer-show\", this.showEvent.bind(this));\n    super.disconnectedCallback();\n  }\n}\nwindow.customElements.define(SimpleDrawer.tag, SimpleDrawer);\nexport { SimpleDrawer };\n"],"names":["window","SimpleDrawer","requestAvailability","instance","document","createElement","body","appendChild","title","align","opened","closeLabel","closeIcon","SimpleColors","html","this","__openedChanged","close","css","String","Boolean","Object","changedProperties","addEventListener","bind","showEvent","forEach","oldValue","propName","_this2","_openedChanged","e","firstChild","removeChild","setTimeout","_this3","show","detail","elements","invokedBy","clone","size","element","shadowRoot","querySelector","updateStyles","slots","i","cloneNode","setAttribute","_this4","dispatchEvent","Event","async","microTask","run","_this5","focus","value","newValue","_typeof","evt","CustomEvent","bubbles","cancelable","animationEnded","removeEventListener","customElements","define","tag"],"mappings":"+oKAiBAA,OAAOC,aAAeD,OAAOC,cAAgB,GAI7CD,OAAOC,aAAaC,oBAAsB,kBACnCF,OAAOC,aAAaE,WACvBH,OAAOC,aAAaE,SAAWC,SAASC,cAAc,iBACtDD,SAASE,KAAKC,YAAYP,OAAOC,aAAaE,WAEzCH,OAAOC,aAAaE,cAQvBF,yKA4LGO,MAAQ,KACRC,MAAQ,SACRC,QAAS,IACTC,WAAa,UACbC,UAAY,6PAhMMC,2DA8EhBC,WA6BqCC,KAAKL,OAA4BK,KAAKC,gBAA4BD,KAAKN,MAG/GM,KAAKP,MAAQM,WAAWC,KAAKP,OAAe,GAMbO,KAAKE,MACnBF,KAAKH,UAA2BG,KAAKJ,uFA/GxDO,ubA8HK,MACC,aACAC,cAKD,MACC,aACAA,eAKA,MACA,cACAC,iBACG,cAKC,MACJ,kBACAD,kBAKG,MACH,iBACAA,kBAKG,MACH,iBACAE,4CAWD,4DAgBIC,GACXtB,OAAOuB,iBAAiB,qBAAsBR,KAAKE,MAAMO,KAAKT,OAC9Df,OAAOuB,iBAAiB,qBAAsBR,KAAKU,UAAUD,KAAKT,uCAK5DO,cACNA,EAAkBI,QAAQ,SAACC,EAAUC,GACnB,UAAZA,GACFC,EAAKC,eAAeD,EAAKD,GAAWD,uCAOhCI,iBAGJhB,KAAKL,OAAQ,MAEY,OAApBK,KAAKiB,iBACLC,YAAYlB,KAAKiB,YAExBE,WAAW,WACTC,EAAKC,KACHL,EAAEM,OAAO7B,MACTuB,EAAEM,OAAOC,SACTP,EAAEM,OAAOE,UACTR,EAAEM,OAAO5B,MACTsB,EAAEM,OAAOG,QAEV,eAEEJ,KACHL,EAAEM,OAAO7B,MACTuB,EAAEM,OAAOC,SACTP,EAAEM,OAAOE,UACTR,EAAEM,OAAO5B,MACTsB,EAAEM,OAAOI,KACTV,EAAEM,OAAOG,oCAQbhC,EACA8B,EACAC,OAYIG,SAXJjC,yDAAQ,OACRgC,yDAAO,QACPD,+DAEKD,UAAYA,OACZ/B,MAAQA,OACRC,MAAQA,OAERkC,WACFC,cAAc,WACdC,aAAa,sBAAwBJ,QAIpCK,EAAQ,CAAC,SAAU,eAClB,IAAIC,KAAKD,EACRR,EAASQ,EAAMC,OAEfL,EADEF,EACQF,EAASQ,EAAMC,IAAIC,WAAU,GAE7BV,EAASQ,EAAMC,KAEnBE,aAAa,OAAQH,EAAMC,SAC9BxC,YAAYmC,IAIrBR,WAAW,WACTgB,EAAKxC,QAAS,EAEdV,OAAOmD,cAAc,IAAIC,MAAM,YAC9B,4CAMUrB,uBAERvB,MAAQ,GACc,OAApBO,KAAKiB,iBACLC,YAAYlB,KAAKiB,YAEpBjB,KAAKwB,WACPc,MAAMC,UAAUC,IAAI,WAClBrB,WAAW,WACTsB,EAAKjB,UAAUkB,SACd,4CAQF/C,QAAS,0CAGAqB,QACTrB,OAASqB,EAAEM,OAAOqB,6CAGVC,EAAUhC,oBACnBiC,EAAOD,IAAkCA,GAWtC,GAAIA,EAAU,KACbE,EAAM,IAAIC,YAAY,uBAAwB,CAClDC,SAAS,EACTC,YAAY,EACZ3B,OAAQ,CACN3B,QAAQ,EACR6B,UAAWxB,KAAKwB,kBAGfY,cAAcU,QApBkC,MAChDI,qBACCJ,EAAM,IAAIC,YAAY,uBAAwB,CAClDC,SAAS,EACTC,YAAY,EACZ3B,OAAQ,CACN3B,QAAQ,EACR6B,UAAWxB,KAAKwB,kBAGfY,cAAcU,mDAiBrB7D,OAAOkE,oBAAoB,qBAAsBnD,KAAKE,MAAMO,KAAKT,OACjEf,OAAOkE,oBAAoB,qBAAsBnD,KAAKU,UAAUD,KAAKT,yEAIzEf,OAAOmE,eAAeC,OAAOnE,EAAaoE,IAAKpE"}