{"version":3,"file":"json-editor.umd.js","sources":["json-editor.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from \"lit-element/lit-element.js\";\n/**\n * `json-editor`\n * `simple JSON blob data binding to a text area`\n * @demo demo/index.html\n * @element json-editor\n */\nclass JsonEditor extends LitElement {\n  \n  //styles function\n  static get styles() {\n    return  [\n      \n      css`\n:host {\n  display: block;\n}\n:host([hidden]) {\n  display: none;\n}\n      `\n    ];\n  }\n  // render function\n  render() {\n    return html`\n\n<custom-style>\n  <style>\n  :host([error]) paper-textarea {\n    --iron-autogrow-textarea: {\n      background-color: #ffeeee;\n    };\n  }\n  paper-textarea {\n    --iron-autogrow-textarea: {\n      font-family: \"Lucida Console\", Monaco, monospace;\n      font-weight: 600;\n      white-space: pre;\n      line-height: 20px;\n      padding: 9.5px;\n      margin: 0 0 10px;\n      font-size: 13px;\n      color: #000000;\n      word-break: break-all;\n      word-wrap: break-word;\n      background-color: #f5f5f5;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      transition: 0.3s linear all;\n    };\n  }\n  </style>\n</custom-style>\n<paper-textarea \n  label=\"${this.label}\"\n  value=\"${this.value}\"\n  @value-changed=\"${this.valueEvent}\"\n  error-message=\"Invalid JSON!\"\n  ?readonly=\"${this.disabled}\"\n  ?invalid=\"${this.error}\"\n  max-rows=\"${this.maxRows}\"></paper-textarea>`;\n  }\n\n  // properties available to the custom element for data binding\n    static get properties() {\n    return {\n  \n  ...super.properties,\n  \n  /**\n   * label for the text area\n   */\n  \"label\": {\n    \"type\": String\n  },\n  /**\n   * State of being valid JSON object\n   */\n  \"error\": {\n    \"type\": Boolean,\n    \"reflect\": true\n  },\n  /**\n   * toggling disabled state of the editor\n   */\n  \"disabled\": {\n    \"type\": Boolean,\n    \"reflect\": true\n  },\n  /**\n   * max rows in the textarea\n   */\n  \"maxRows\": {\n    \"type\": Number,\n    \"reflect\": true,\n    \"attribute\": \"max-rows\"\n  },\n  /**\n   * String based value of the editor, use this to set initial value\n   */\n  \"value\": {\n    \"type\": String,\n    \"reflect\": false\n  },\n  /**\n   * format test to update value so it's pretty printed\n   */\n  \"formatTest\": {\n    \"type\": String,\n    \"attribute\": \"format-test\"\n  },\n  /**\n   * The current data object\n   */\n  \"currentData\": {\n    \"type\": Object,\n    \"attribute\": \"current-data\"\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"json-editor\";\n  }\n  constructor() {\n    super();\n    this.label = \"JSON data\";\n    this.error = false;\n    this.disabled = false;\n    this.maxRows = 0;\n    this.value = \"\";\n    import(\"@polymer/paper-input/paper-textarea.js\");\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      let notifiedProps = [\"currentData\", \"value\"];\n      if (notifiedProps.includes(propName)) {\n        // notify\n        let eventName = `${propName\n          .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\")\n          .toLowerCase()}-changed`;\n        this.dispatchEvent(\n          new CustomEvent(eventName, {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n      if (propName == \"value\") {\n        this.formatTest = this._computeFormattedValue(this[propName]);\n        this.currentData = this._computeCurrentData(this[propName]);\n        this._valueChanged(this[propName]);\n      }\n    });\n  }\n  valueEvent(e) {\n    this.value = e.detail.value;\n  }\n  // Observer value for changes\n  _valueChanged(newValue, oldValue) {\n    // try to evaluate this as json, otherwise return an error\n    try {\n      let v = JSON.parse(newValue);\n      if (v) {\n        this.error = false;\n      }\n    } catch (e) {\n      this.error = true;\n    }\n  }\n  _computeFormattedValue(value) {\n    try {\n      let formatted = JSON.stringify(JSON.parse(formatted), null, 2);\n      if (formatted !== value) {\n        this.value = formatted;\n      }\n    } catch (e) {}\n  }\n  /**\n   * Computed value based on parsing the value in question\n   */\n  _computeCurrentData(value) {\n    try {\n      return JSON.parse(value);\n    } catch (e) {}\n  }\n}\nwindow.customElements.define(JsonEditor.tag, JsonEditor);\nexport { JsonEditor };\n"],"names":["JsonEditor","label","error","disabled","maxRows","value","LitElement","html","this","valueEvent","css","String","Boolean","Number","Object","changedProperties","forEach","oldValue","propName","includes","eventName","replace","toLowerCase","_this2","dispatchEvent","CustomEvent","detail","formatTest","_computeFormattedValue","currentData","_computeCurrentData","_valueChanged","e","newValue","JSON","parse","formatted","stringify","window","customElements","define","tag"],"mappings":"ipFAWMA,yKA6HGC,MAAQ,cACRC,OAAQ,IACRC,UAAW,IACXC,QAAU,IACVC,MAAQ,UACN,wRAlIcC,yDAkBdC,WA8BAC,KAAKP,MACLO,KAAKH,MACIG,KAAKC,WAEVD,KAAKL,SACNK,KAAKN,MACLM,KAAKJ,gDAlDP,CAENM,sbA4DK,MACCC,cAKD,MACCC,iBACG,YAKD,MACFA,iBACG,WAKF,MACDC,gBACG,YACE,kBAKN,MACCF,gBACG,cAKC,MACJA,iBACK,2BAKA,MACLG,iBACK,oDAWN,qDAWDC,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,MACf,CAAC,cAAe,SAClBC,SAASD,GAAW,KAEhCE,YAAeF,EAChBG,QAAQ,+BAAgC,SACxCC,0BACHC,EAAKC,cACH,IAAIC,YAAYL,EAAW,CACzBM,OAAQ,CACNrB,MAAOkB,EAAKL,OAKJ,SAAZA,IACFK,EAAKI,WAAaJ,EAAKK,uBAAuBL,EAAKL,IACnDK,EAAKM,YAAcN,EAAKO,oBAAoBP,EAAKL,IACjDK,EAAKQ,cAAcR,EAAKL,0CAInBc,QACJ3B,MAAQ2B,EAAEN,OAAOrB,4CAGV4B,EAAUhB,OAGZiB,KAAKC,MAAMF,UAEZ/B,OAAQ,GAEf,MAAO8B,QACF9B,OAAQ,kDAGMG,WAEf+B,EAAYF,KAAKG,UAAUH,KAAKC,MAAMC,GAAY,KAAM,GACxDA,IAAc/B,SACXA,MAAQ+B,GAEf,MAAOJ,iDAKS3B,cAET6B,KAAKC,MAAM9B,GAClB,MAAO2B,cAGbM,OAAOC,eAAeC,OAAOxC,EAAWyC,IAAKzC"}