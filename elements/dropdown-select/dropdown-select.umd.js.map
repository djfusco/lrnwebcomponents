{"version":3,"file":"dropdown-select.umd.js","sources":["dropdown-select.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport \"@lrnwebcomponents/simple-picker/simple-picker.js\";\n/**\n * `dropdown-select`\n * an easy to use, works as expected dropdown menu.\n *\n * @element dropdown-select\n * @demo demo/index.html\n */\nclass DropdownSelect extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n          --simple-picker-border-width: 0;\n          --simple-picker-options-border-width: 1px;\n          --simple-picker-options-border-color: var(\n            --simple-fields-accent-color\n          );\n          --simple-picker-background-color: rgba(255, 255, 255, 0);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      `\n    ];\n  }\n  render() {\n    return html`\n      <simple-fields-container\n        id=\"menu\"\n        .error-message=\"${this.errorMessage}\"\n        .label=\"${this.label}\"\n      >\n        <simple-picker\n          id=\"picker\"\n          slot=\"field\"\n          value=\"${this.value}\"\n          @expand=\"${this._onOpen}\"\n          @collapse=\"${this.onClose}\"\n          @changed=\"${this._dropDownChanged}\"\n        >\n        </simple-picker>\n      </simple-fields-container>\n      <slot id=\"content\" hidden></slot>\n    `;\n  }\n\n  static get tag() {\n    return \"dropdown-select\";\n  }\n  constructor() {\n    super();\n    this.label = \"Select an option.\";\n    this.options = [[]];\n    this.opened = false;\n    this.setOptions();\n    this.observer.observe(this, {\n      attributes: false,\n      childList: true,\n      subtree: false\n    });\n\n    import(\"@lrnwebcomponents/simple-fields/lib/simple-fields-container.js\");\n  }\n\n  disconnectedCallback() {\n    this.observer.disconnect();\n    super.disconnectedCallback();\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The error message to display when invalid.\n       */\n      errorMessage: {\n        attribute: \"error-message\",\n        type: String\n      },\n\n      /**\n       * The label of the select menu\n       */\n      label: {\n        type: String\n      },\n      /**\n       * True if the dropdown is open. Otherwise, false.\n       */\n      opened: {\n        type: Boolean\n      },\n      /**\n       * Optional options array\n       */\n      options: {\n        type: Array\n      },\n\n      /**\n       * The last selected item.\n       */\n      selectedItem: {\n        attribute: \"selected-item\",\n        type: Object\n      },\n\n      /**\n       * The index of the selected item\n       */\n      selectedItemIndex: {\n        attribute: \"selected-item-index\",\n        type: Number\n      },\n\n      /**\n       * The label of the selected item\n       */\n      selectedItemLabel: {\n        attribute: \"selected-item-label\",\n        type: String\n      },\n\n      /**\n       * The default value\n       */\n      value: {\n        type: String,\n        reflect: true\n      }\n    };\n  }\n  /**\n   * mutation observer for dropdown\n   * @readonly\n   * @returns {object}\n   */\n  get observer() {\n    let callback = () => this.setOptions();\n    return new MutationObserver(callback);\n  }\n  setOptions() {\n    let options = [];\n    this.querySelectorAll(\"paper-item\").forEach((option, index) => {\n      options.push([\n        {\n          alt: option.innerHTML,\n          style: option.getAttribute(\"style\") || undefined,\n          icon: option.querySelector(\"[icon]\")\n            ? option.querySelector(\"[icon]\").getAttribute(\"icon\")\n            : undefined,\n          value:\n            option.getAttribute(\"value\") || option.getAttribute(\"id\") || index\n        }\n      ]);\n    });\n    if (options === []) options = [[]];\n    this.options = options;\n  }\n\n  updated(changedProperties) {\n    let picker =\n      this.shadowRoot && this.shadowRoot.querySelector(\"#picker\")\n        ? this.shadowRoot.querySelector(\"#picker\")\n        : undefined;\n    changedProperties.forEach((oldValue, propName) => {\n      console.log(propName, oldValue, this[propName]);\n      if (propName === \"value\") this._valueChanged(this.value, oldValue);\n      if (propName === \"options\" && this.options !== oldValue)\n        picker.options = this.options;\n    });\n    this.dispatchEvent(\n      new CustomEvent(\"change\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n  }\n\n  /**\n   * Sets the opened property to true\n   */\n  _onOpen() {\n    this.opened = true;\n    this.dispatchEvent(\n      new CustomEvent(\"open\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n  }\n\n  /**\n   * Sets the opened property to false\n   */\n  _onClose() {\n    this.opened = false;\n    this.dispatchEvent(\n      new CustomEvent(\"close\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n  }\n  /**\n   * updates value when dropdown-menu's selected item changes\n   * @param {event} e change event\n   */\n  _dropDownChanged(e) {\n    let picker =\n      this.shadowRoot && this.shadowRoot.querySelector(\"#picker\")\n        ? this.shadowRoot.querySelector(\"#picker\")\n        : undefined;\n    this.value = picker.value;\n  }\n  /**\n   * Notice value has changed and ensure data model is accurate\n   * @param {string} newValue\n   * @param {string} oldValue\n   * @fires dropdown-select-changed\n   * @fires value-changed\n   */\n  _valueChanged(newValue, oldValue) {\n    let label = null,\n      index = null,\n      ctr = -1;\n    console.log(\"value-changed\", {\n      value: newValue,\n      oldValue: oldValue\n    });\n    this.selectedItem = this.value;\n    this.options.forEach(row =>\n      row.forEach(item => {\n        if (this.value === item.value) {\n          label = item.alt || item.value;\n          index = ctr++;\n        }\n      })\n    );\n    this.selectedItemLabel = label;\n    this.selectedItemIndex = index;\n    if (typeof oldValue !== typeof undefined) {\n      this.dispatchEvent(\n        new CustomEvent(\"value-changed\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          target: this,\n          detail: {\n            value: newValue,\n            oldValue: oldValue\n          }\n        })\n      );\n      this.dispatchEvent(\n        new CustomEvent(\"dropdown-select-changed\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: this\n        })\n      );\n    }\n  }\n\n  /**\n   * @event awesome-change\n   *\n   * Fired when `element` changes its awesomeness level.\n   */\n\n  /**\n   * @event value-changed\n   *\n   * fired when value has changed\n   * @param {object} target dropdown-select instance\n   * @param {object} detail `{ value: newValue, oldValue: oldValue }`\n   */\n\n  /**\n   * @event dropdown-select-changed\n   *\n   * fired when value has changed (deprecated)\n   * @param {object} detail dropdown-select instance\n   */\n}\nwindow.customElements.define(DropdownSelect.tag, DropdownSelect);\nexport { DropdownSelect };\n"],"names":["DropdownSelect","label","options","opened","setOptions","observer","observe","attributes","childList","subtree","LitElement","html","this","errorMessage","value","_onOpen","onClose","_dropDownChanged","css","disconnect","querySelectorAll","forEach","option","index","push","alt","innerHTML","style","getAttribute","undefined","icon","querySelector","changedProperties","picker","shadowRoot","oldValue","propName","console","log","_this2","_valueChanged","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","e","newValue","ctr","selectedItem","row","item","_this3","selectedItemLabel","selectedItemIndex","_typeof","target","MutationObserver","_this4","attribute","type","String","Boolean","Array","Object","Number","reflect","window","customElements","define","tag"],"mappings":"o+EASMA,kOA6CGC,MAAQ,sBACRC,QAAU,CAAC,MACXC,QAAS,IACTC,eACAC,SAASC,aAAc,CAC1BC,YAAY,EACZC,WAAW,EACXC,SAAS,WAGJ,gTAvDkBC,yDAoBlBC,WAGeC,KAAKC,aACbD,KAAKX,MAKJW,KAAKE,MACHF,KAAKG,QACHH,KAAKI,QACNJ,KAAKK,yDA9BhB,CACLC,8CAsCK,6EAkBFb,SAASc,+GA4EVjB,EAAU,QACTkB,iBAAiB,cAAcC,QAAQ,SAACC,EAAQC,GACnDrB,EAAQsB,KAAK,CACX,CACEC,IAAKH,EAAOI,UACZC,MAAOL,EAAOM,aAAa,eAAYC,EACvCC,KAAMR,EAAOS,cAAc,UACvBT,EAAOS,cAAc,UAAUH,aAAa,aAC5CC,EACJf,MACEQ,EAAOM,aAAa,UAAYN,EAAOM,aAAa,OAASL,OAIjErB,IAAY,KAAIA,EAAU,CAAC,UAC1BA,QAAUA,kCAGT8B,cACFC,EACFrB,KAAKsB,YAActB,KAAKsB,WAAWH,cAAc,WAC7CnB,KAAKsB,WAAWH,cAAc,gBAC9BF,EACNG,EAAkBX,QAAQ,SAACc,EAAUC,GACnCC,QAAQC,IAAIF,EAAUD,EAAUI,EAAKH,IACpB,UAAbA,GAAsBG,EAAKC,cAAcD,EAAKzB,MAAOqB,GACxC,YAAbC,GAA0BG,EAAKrC,UAAYiC,IAC7CF,EAAO/B,QAAUqC,EAAKrC,gBAErBuC,cACH,IAAIC,YAAY,SAAU,CACxBC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,OAAQlC,+CASPT,QAAS,OACTsC,cACH,IAAIC,YAAY,OAAQ,CACtBC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,OAAQlC,gDASPT,QAAS,OACTsC,cACH,IAAIC,YAAY,QAAS,CACvBC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,OAAQlC,iDAQGmC,OACXd,EACFrB,KAAKsB,YAActB,KAAKsB,WAAWH,cAAc,WAC7CnB,KAAKsB,WAAWH,cAAc,gBAC9BF,OACDf,MAAQmB,EAAOnB,4CASRkC,EAAUb,cAClBlC,EAAQ,KACVsB,EAAQ,KACR0B,GAAO,EACTZ,QAAQC,IAAI,gBAAiB,CAC3BxB,MAAOkC,EACPb,SAAUA,SAEPe,aAAetC,KAAKE,WACpBZ,QAAQmB,QAAQ,SAAA8B,UACnBA,EAAI9B,QAAQ,SAAA+B,GACNC,EAAKvC,QAAUsC,EAAKtC,QACtBb,EAAQmD,EAAK3B,KAAO2B,EAAKtC,MACzBS,EAAQ0B,cAITK,kBAAoBrD,OACpBsD,kBAAoBhC,gBACrBiC,EAAOrB,UACJM,cACH,IAAIC,YAAY,gBAAiB,CAC/BC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVY,OAAQ7C,KACRkC,OAAQ,CACNhC,MAAOkC,EACPb,SAAUA,WAIXM,cACH,IAAIC,YAAY,0BAA2B,CACzCC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,OAAQlC,4DA9HP,IAAI8C,iBADI,kBAAMC,EAAKvD,0DAnEnB,CAILS,aAAc,CACZ+C,UAAW,gBACXC,KAAMC,QAMR7D,MAAO,CACL4D,KAAMC,QAKR3D,OAAQ,CACN0D,KAAME,SAKR7D,QAAS,CACP2D,KAAMG,OAMRd,aAAc,CACZU,UAAW,gBACXC,KAAMI,QAMRV,kBAAmB,CACjBK,UAAW,sBACXC,KAAMK,QAMRZ,kBAAmB,CACjBM,UAAW,sBACXC,KAAMC,QAMRhD,MAAO,CACL+C,KAAMC,OACNK,SAAS,aAoKjBC,OAAOC,eAAeC,OAAOtE,EAAeuE,IAAKvE"}