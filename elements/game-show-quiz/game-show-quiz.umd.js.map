{"version":3,"file":"game-show-quiz.umd.js","sources":["lib/game-show-quiz-modal.js","game-show-quiz.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\n/**\n * `game-show-quiz-modal`\n * @element game-show-quiz-modal\n * `Modal for the quiz show`\n *  @microcopy - the mental model for this element\n *  - game show - a display board in the style of Jeopardy\n */\nclass GameShowQuizModal extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        paper-dialog:not(:defined) {\n          display: none;\n        }\n        paper-dialog {\n          min-width: 60%;\n          top: 2%;\n          bottom: 2%;\n          margin: 0;\n          padding: 0;\n          left: 8%;\n          right: 8%;\n          position: fixed;\n          overflow: hidden;\n        }\n        .content {\n          font-size: 16px;\n          overflow: scroll;\n          min-height: 60vh;\n          height: 80vh;\n          margin: 0;\n          padding: 0;\n        }\n        h2 {\n          font-size: 24px;\n          background-color: var(--game-show-bg-color);\n          color: var(--game-show-text-color);\n          margin: 0;\n          padding: 8px;\n          text-align: center;\n        }\n        .buttons {\n          font-size: 20px;\n          font-weight: bold;\n          background-color: var(--game-show-bg-color);\n          bottom: 0;\n          position: absolute;\n          left: 0;\n          right: 0;\n        }\n        .buttons ::slotted(*) {\n          width: 50%;\n          margin: 0 auto;\n          color: var(--game-show-bg-color);\n          background-color: var(--game-show-text-color);\n        }\n        .buttons ::slotted(*[disabled]) {\n          background: #eaeaea;\n          color: #a8a8a8;\n        }\n        .buttons ::slotted(#continue) {\n          color: var(--simple-colors-default-theme-blue-11);\n          background-color: var(--simple-colors-default-theme-blue-1);\n        }\n        @media screen and (max-width: 600px) {\n          paper-dialog {\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n          }\n          h2 {\n            font-size: 20px;\n          }\n          .buttons {\n            font-size: 12px;\n          }\n          .buttons ::slotted(*) {\n            width: 100%;\n          }\n          .content {\n            font-size: 12px;\n          }\n        }\n      `\n    ];\n  }\n  static get tag() {\n    return \"game-show-quiz-modal\";\n  }\n  static get properties() {\n    return { title: { type: String } };\n  }\n  constructor() {\n    super();\n    import(\"@polymer/paper-dialog/paper-dialog.js\");\n  }\n  render() {\n    return html`\n      <paper-dialog modal>\n        <h2>${this.title}</h2>\n        <div class=\"content\"><slot name=\"content\"></slot></div>\n        <div class=\"buttons\"><slot name=\"buttons\"></slot></div>\n      </paper-dialog>\n    `;\n  }\n  /**\n   * Basic bridge to the toggle function in paper-dialog\n   */\n  toggle() {\n    this.shadowRoot.querySelector(\"paper-dialog\").toggle();\n    setTimeout(() => {\n      var evt = document.createEvent(\"UIEvents\");\n      evt.initUIEvent(\"resize\", true, false, window, 0);\n      window.dispatchEvent(evt);\n    }, 100);\n  }\n}\nwindow.customElements.define(GameShowQuizModal.tag, GameShowQuizModal);\nexport { GameShowQuizModal };\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { MutableData } from \"@polymer/polymer/lib/mixins/mutable-data.js\";\nimport { wipeSlot } from \"@lrnwebcomponents/utils/utils.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@lrnwebcomponents/simple-toast/simple-toast.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@lrnwebcomponents/simple-colors/lib/simple-colors-polymer.js\";\nimport \"@vaadin/vaadin-split-layout/vaadin-split-layout.js\";\nimport \"@lrnwebcomponents/multiple-choice/multiple-choice.js\";\nimport \"./lib/game-show-quiz-modal.js\";\n/**\n * `game-show-quiz`\n * `Simple game show with questions and answers`\n * @microcopy - the mental model for this element\n * - game show - a display board in the style of Jeopardy\n * @demo demo/index.html\n * @element game-show-quiz\n */\nclass GameShowQuiz extends MutableData(PolymerElement) {\n  static get tag() {\n    return \"game-show-quiz\";\n  }\n  constructor() {\n    super();\n    window.SimpleToast.requestAvailability();\n    import(\"@polymer/iron-image/iron-image.js\");\n    import(\"@lrnwebcomponents/responsive-grid/lib/responsive-grid-row.js\");\n    import(\"@lrnwebcomponents/responsive-grid/lib/responsive-grid-col.js\");\n    import(\"@polymer/app-layout/app-drawer/app-drawer.js\");\n    import(\"@polymer/app-layout/app-header/app-header.js\");\n    import(\"@polymer/app-layout/app-toolbar/app-toolbar.js\");\n    import(\"@polymer/iron-flex-layout/iron-flex-layout.js\");\n    import(\"@polymer/iron-icon/iron-icon.js\");\n    import(\"@polymer/iron-icons/iron-icons.js\");\n    import(\"@polymer/iron-icons/editor-icons.js\");\n    import(\"@lrnwebcomponents/chartist-render/chartist-render.js\");\n  }\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          --game-show-bg-color: var(--simple-colors-default-theme-blue-11);\n          --game-show-text-color: var(--simple-colors-default-theme-blue-1);\n        }\n        chartist-render#piechart {\n          width: 300px;\n          height: 300px;\n          display: inline-block;\n        }\n        chartist-render.mini-chart {\n          width: 132px;\n          height: 132px;\n          display: inline-block;\n          --chartist-color-1: green;\n          --chartist-color-2: red;\n        }\n        app-toolbar {\n          background-color: var(--game-show-bg-color);\n          color: var(--game-show-text-color);\n          font-size: 24px;\n          display: flex;\n        }\n        iron-icon {\n          display: inline-block;\n        }\n        table {\n          width: 90%;\n        }\n        tr {\n          outline: 1px solid black;\n        }\n        td {\n          border-left: 1px solid black;\n          padding: 16px;\n          text-align: center;\n        }\n        .chart-row td {\n          padding: 0;\n        }\n\n        paper-button {\n          --paper-button-ink-color: var(--game-show-bg-color);\n          text-transform: none;\n          display: block;\n        }\n        #helpbutton {\n          text-align: center;\n          padding: 8px;\n          font-size: 12px;\n          vertical-align: middle;\n          display: inline-flex;\n        }\n        paper-button + [main-title] {\n          margin-left: 24px;\n          display: inline-flex;\n        }\n        app-header {\n          color: var(--game-show-text-color);\n          --app-header-background-rear-layer: {\n            background-color: #ef6c00;\n          }\n        }\n        responsive-grid-row {\n          --responsive-grid-row-inner-margin-left: 0;\n          --responsive-grid-row-inner-margin-right: 0;\n        }\n        responsive-grid-col {\n          --responsive-grid-col-inner-padding-left: 0;\n          --responsive-grid-col-inner-padding-right: 0;\n        }\n        #contentcontainer {\n          margin: 0 auto;\n          font-size: 16px;\n        }\n        .grid-button {\n          width: 100%;\n          height: 80px;\n          font-size: 24px;\n          text-align: center;\n          min-width: unset;\n          padding: 0;\n          margin: 0;\n          align-items: center;\n          display: flex;\n        }\n        .status-icon {\n          border-radius: 50%;\n          width: 48px;\n          height: 48px;\n          opacity: 0.5;\n          right: 0;\n          bottom: 0;\n          position: absolute;\n        }\n        .correct {\n          color: var(--simple-colors-default-theme-green-6);\n          background-color: var(--simple-colors-default-theme-green-11);\n        }\n        .incorrect {\n          color: var(--simple-colors-default-theme-red-6);\n          background-color: var(--simple-colors-default-theme-red-11);\n        }\n        .row-0 paper-button[disabled] {\n          font-weight: bold;\n          font-size: 16px;\n        }\n        .grid-button[data-type=\"bonus\"] {\n          display: inline-flex;\n          position: absolute;\n          outline: 1px solid #dddddd;\n        }\n        .grid-button[data-type=\"bonus\"][data-display-points=\"1\"] {\n          height: 320px;\n        }\n        .grid-button[data-type=\"bonus\"][data-display-points=\"2\"] {\n          height: 160px;\n        }\n        @media screen and (max-width: 600px) {\n          app-toolbar {\n            font-size: 14px;\n          }\n          paper-button {\n            padding: 0;\n            margin: 0;\n            width: 16px;\n            height: 16px;\n            min-width: unset;\n          }\n          game-show-quiz-modal paper-button {\n            height: 48px;\n            width: 100%;\n          }\n          .grid-button {\n            font-size: 14px;\n          }\n          .status-icon {\n            width: 24px;\n            height: 24px;\n            opacity: 1;\n            display: inline-block;\n          }\n          .row-0 paper-button[disabled] {\n            font-weight: bold;\n            font-size: 10px;\n          }\n        }\n      </style>\n      <app-header>\n        <app-toolbar>\n          <paper-button id=\"scorebutton\" on-click=\"scoreBoardToggle\">\n            <iron-icon icon=\"editor:pie-chart\"></iron-icon\n            ><label for=\"scorebutton\">Score board</label>\n          </paper-button>\n          <div main-title>[[title]]</div>\n          <paper-button id=\"helpbutton\" on-click=\"directionsToggle\">\n            <iron-icon icon=\"help\"></iron-icon\n            ><label for=\"helpbutton\">Directions</label>\n          </paper-button>\n        </app-toolbar>\n      </app-header>\n      <div id=\"contentcontainer\">\n        <div style=\"font-size: 24px;\" hidden$=\"[[!remainingAttempts]]\">\n          Points Remaining to Attempt:\n          <strong>[[remainingAttempts]]</strong>\n        </div>\n        <template is=\"dom-repeat\" items=\"[[gameBoard]]\" as=\"row\" mutable-data>\n          <responsive-grid-row gutter=\"0\" class\\$=\"row row-[[index]]\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[row.cols]]\"\n              as=\"col\"\n              mutable-data\n            >\n              <responsive-grid-col xl=\"2\" lg=\"2\" md=\"2\" sm=\"2\" xs=\"2\">\n                <paper-button\n                  class=\"grid-button\"\n                  raised=\"[[!col.notRaised]]\"\n                  data-question-uuid\\$=\"[[col.uuid]]\"\n                  data-value\\$=\"[[col.points]]\"\n                  data-display-points\\$=\"[[col.displayPoints]]\"\n                  data-is-bonus\\$=\"[[col.isBonus]]\"\n                  data-type\\$=\"[[col.type]]\"\n                  disabled\\$=\"[[col.disabled]]\"\n                  >[[col.title]]<br />[[col.displayPoints]]</paper-button\n                >\n              </responsive-grid-col>\n            </template>\n          </responsive-grid-row>\n        </template>\n      </div>\n      <game-show-quiz-modal id=\"scoreboard\" title=\"Score board\">\n        <div slot=\"content\">\n          <div style=\"padding: 32px;\">\n            <chartist-render\n              id=\"piechart\"\n              chart-title=\"Breakdown of attempts\"\n              data=\"[[attemptsData.overall]]\"\n              type=\"pie\"\n              scale=\"ct-square\"\n            >\n            </chartist-render>\n            <table style=\"margin: 16px auto;\">\n              <tbody>\n                <tr>\n                  <th></th>\n                  <th>Slide ID</th>\n                  <th>Terms</th>\n                  <th>Reading</th>\n                  <th>Lecture</th>\n                  <th>Total</th>\n                </tr>\n                <tr>\n                  <th>Points Earned</th>\n                  <td>[[points.slideid.earned]]</td>\n                  <td>[[points.terminology.earned]]</td>\n                  <td>[[points.reading.earned]]</td>\n                  <td>[[points.lecture.earned]]</td>\n                  <td>[[points.total.earned]]</td>\n                </tr>\n                <tr>\n                  <th>Points Attempted</th>\n                  <td>[[points.slideid.attempted]]</td>\n                  <td>[[points.terminology.attempted]]</td>\n                  <td>[[points.reading.attempted]]</td>\n                  <td>[[points.lecture.attempted]]</td>\n                  <td>[[points.total.attempted]]</td>\n                </tr>\n                <tr>\n                  <th>Category Percentage</th>\n                  <td>[[points.slideid.percent]]</td>\n                  <td>[[points.terminology.percent]]</td>\n                  <td>[[points.reading.percent]]</td>\n                  <td>[[points.lecture.percent]]</td>\n                  <td>[[points.total.percent]]</td>\n                </tr>\n                <tr class=\"chart-row\">\n                  <th>Pie chart</th>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Slide ID percentage\"\n                      data=\"[[attemptsData.slideid]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Terminology percentage\"\n                      data=\"[[attemptsData.terminology]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Reading percentage\"\n                      data=\"[[attemptsData.reading]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Lecture percentage\"\n                      data=\"[[attemptsData.lecture]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                  <td>\n                    <chartist-render\n                      class=\"mini-chart\"\n                      chart-title=\"Total percentage\"\n                      data=\"[[attemptsData.total]]\"\n                      type=\"pie\"\n                      scale=\"ct-square\"\n                    ></chartist-render>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <div style=\"font-size: 24px;\" hidden$=\"[[!remainingAttempts]]\">\n              Points Remaining to Attempt:\n              <strong>[[remainingAttempts]]</strong>\n            </div>\n          </div>\n        </div>\n        <paper-button\n          aria-label=\"Close score board and return to game\"\n          slot=\"buttons\"\n          id=\"dismiss\"\n          dialog-confirm\n          raised\n          >Return to game board</paper-button\n        >\n      </game-show-quiz-modal>\n      <game-show-quiz-modal id=\"directions\" title=\"[[directionsTitle]]\">\n        <div slot=\"content\"><slot></slot></div>\n        <paper-button\n          aria-label=\"Close directions dialog and return to game\"\n          slot=\"buttons\"\n          id=\"dismiss\"\n          dialog-confirm\n          raised\n          >Good luck!</paper-button\n        >\n      </game-show-quiz-modal>\n      <game-show-quiz-modal\n        id=\"dialog\"\n        title=\"[[questionTitle]] [[__activeQuestionDetails.points]] point, [[__activeQuestionDetails.type]] question.\"\n      >\n        <vaadin-split-layout slot=\"content\" style=\"height:80vh;\">\n          <div id=\"col1\" style=\"width:70%;min-width: 30%;\">\n            <iron-image\n              style=\"min-width:100px; width:100%; min-height:50vh; height:75vh;\"\n              sizing=\"contain\"\n              preload=\"\"\n              src\\$=\"[[activeQuestion.image]]\"\n            ></iron-image>\n          </div>\n          <div id=\"col2\" style=\"width:30%;min-width: 30%;\">\n            <multiple-choice\n              randomize\n              single-option\n              id=\"question\"\n              hide-buttons\n              title=\"[[activeQuestion.title]]\"\n              answers=\"[[activeQuestion.data]]\"\n            ></multiple-choice>\n            <div hidden\\$=\"[[!activeQuestion.wrong]]\" aria-hidden=\"true\">\n              <h3>Feedback</h3>\n              <p>[[activeQuestion.feedback]]</p>\n            </div>\n          </div>\n        </vaadin-split-layout>\n        <paper-button\n          slot=\"buttons\"\n          hidden\\$=\"[[activeQuestion.submitted]]\"\n          id=\"submit\"\n          raised=\"\"\n          disabled\\$=\"[[__submitDisabled]]\"\n          >Submit answer\n          <iron-icon\n            hidden$=\"[[__submitDisabled]]\"\n            icon=\"icons:touch-app\"\n          ></iron-icon\n        ></paper-button>\n        <paper-button\n          slot=\"buttons\"\n          id=\"continue\"\n          hidden\\$=\"[[!activeQuestion.submitted]]\"\n          dialog-confirm\n          raised\n          aria-disabled\\$=\"[[activeQuestion.submitted]]\"\n          aria-label=\"Return to game board\"\n          >Continue <iron-icon icon=\"icons:arrow-forward\"></iron-icon\n        ></paper-button>\n      </game-show-quiz-modal>\n      <iron-ajax\n        auto\n        id=\"gamedata\"\n        url=\"[[gameData]]\"\n        handle-as=\"json\"\n        last-response=\"{{gameBoardData}}\"\n      ></iron-ajax>\n      <iron-ajax\n        auto\n        id=\"gamedirections\"\n        url=\"[[gameDirectionsData]]\"\n        handle-as=\"text\"\n        last-response=\"{{gameDirections}}\"\n      ></iron-ajax>\n      <iron-ajax id=\"gamebackend\" hand-as=\"json\"></iron-ajax>\n    `;\n  }\n  /**\n   * Support loading directions from a URL / end point\n   */\n  _gameDirectionsChanged(newValue) {\n    if (newValue) {\n      wipeSlot(this);\n      let div = document.createElement(\"div\");\n      div.style = \"padding: 16px;\";\n      div.innerHTML = newValue;\n      this.appendChild(div.cloneNode(true));\n    }\n  }\n  static get properties() {\n    return {\n      /**\n       * Title\n       */\n      title: {\n        type: String\n      },\n      gameDirectionsData: {\n        type: String\n      },\n      gameDirections: {\n        type: String,\n        observer: \"_gameDirectionsChanged\"\n      },\n      token: {\n        type: String\n      },\n      attemptsData: {\n        type: Object,\n        value: {\n          overall: {\n            labels: [\"Slide ID\", \"Terminology\", \"Reading\", \"Lecture\"],\n            series: [0, 0, 0, 0]\n          },\n          slideid: {\n            labels: [\"Correct\", \"Incorrect\"],\n            series: [0, 0]\n          },\n          terminology: {\n            labels: [\"Correct\", \"Incorrect\"],\n            series: [0, 0]\n          },\n          reading: {\n            labels: [\"Correct\", \"Incorrect\"],\n            series: [0, 0]\n          },\n          lecture: {\n            labels: [\"Correct\", \"Incorrect\"],\n            series: [0, 0]\n          },\n          bonus: {\n            labels: [\"Correct\", \"Incorrect\"],\n            series: [0, 0]\n          },\n          total: {\n            labels: [\"Correct\", \"Incorrect\"],\n            series: [0, 0]\n          }\n        }\n      },\n      /**\n       * Points object\n       */\n      points: {\n        type: Object,\n        value: {\n          slideid: {\n            attempted: 0,\n            earned: 0,\n            percent: 0\n          },\n          terminology: {\n            attempted: 0,\n            earned: 0,\n            percent: 0\n          },\n          reading: {\n            attempted: 0,\n            earned: 0,\n            percent: 0\n          },\n          lecture: {\n            attempted: 0,\n            earned: 0,\n            percent: 0\n          },\n          bonus: {\n            attempted: 0,\n            earned: 0,\n            percent: 0\n          },\n          total: {\n            attempted: 0,\n            earned: 0,\n            percent: 0\n          }\n        }\n      },\n      /**\n       * Remaining attempts for the user\n       */\n      remainingAttempts: {\n        type: Number,\n        value: 30\n      },\n      /**\n       * Title to use on the directions dialog.\n       */\n      directionsTitle: {\n        type: String,\n        value: \"Directions\"\n      },\n      /**\n       * Title to use on the question dialog.\n       */\n      questionTitle: {\n        type: String,\n        value: \"Answer the following\"\n      },\n      /**\n       * Rows on the gameshow board\n       */\n      gameBoard: {\n        type: Array\n      },\n      gameBoardData: {\n        type: Object,\n        observer: \"_gameBoardDataChanged\"\n      },\n      /**\n       * URL to load data for the game.\n       */\n      gameData: {\n        type: String\n      },\n      gameScoreBoardBackend: {\n        type: String\n      },\n      /**\n       * Active item that is in the modal.\n       */\n      activeQuestion: {\n        type: Object\n      }\n    };\n  }\n  /**\n   * Toggle the directions to appear\n   */\n  directionsToggle(e) {\n    this.shadowRoot.querySelector(\"#directions\").toggle();\n  }\n  /**\n   * Toggle the directions to appear\n   */\n  scoreBoardToggle(e) {\n    this.shadowRoot.querySelector(\"#scoreboard\").toggle();\n  }\n  /**\n   * Continue button pressed.\n   */\n  continueGameTap(e) {\n    // destroy this so it rebuilds every time for correct target element\n    // while focusing on the next item just to place keyboard focus more\n    // logically\n    if (\n      typeof this.__activeTap !== typeof undefined &&\n      this.__activeTap.parentNode.nextElementSibling.firstElementChild != null\n    ) {\n      this.__activeTap.parentNode.nextElementSibling.firstElementChild.focus();\n      delete this.__activeTap;\n    }\n  }\n  /**\n   * Register a tap on the board.\n   */\n  registerTap(e) {\n    var found = true;\n    for (var i in this.shadowRoot.querySelector(\"#question\").answers) {\n      if (this.shadowRoot.querySelector(\"#question\").answers[i].userGuess) {\n        found = false;\n      }\n    }\n    // ensure they touch the board before ability to submit\n    this.__submitDisabled = found;\n  }\n  /**\n   * Submit answer to see what they got.\n   */\n  submitAnswer(e) {\n    // reset attemptsData for chartist and rebuild fully throughout\n    let attemptsData = this.attemptsData;\n    // flip submitted status\n    this.set(\"activeQuestion.submitted\", true);\n    this.notifyPath(\"activeQuestion.submitted\");\n    this.shadowRoot.querySelector(\"#continue\").focus();\n    // maker this disabled on the board\n    this.__activeTap.disabled = true;\n    // start to build a status icon\n    let icon = document.createElement(\"iron-icon\");\n    icon.classList.add(\"status-icon\");\n    var total = 0;\n    if (this.__activeType != \"bonus\" && !this.__activeQuestionDetails.isBonus) {\n      // update attempts for the category\n      let num =\n        parseInt(this.points[this.__activeType].attempted) +\n        parseInt(this.__activeValue);\n      this.set(\"points.\" + this.__activeType + \".attempted\", num);\n      this.notifyPath(\"points.\" + this.__activeType + \".attempted\");\n      total =\n        parseInt(this.points.total.attempted) + parseInt(this.__activeValue);\n      // update the global totals for attempt\n      this.set(\"points.total.attempted\", total);\n      this.notifyPath(\"points.total.attempted\");\n      // update remaining attempts\n      this.remainingAttempts =\n        this.remainingAttempts - parseInt(this.__activeValue);\n    }\n    // do a detection for per value type level being filled in to unlock the assoicated bonus question\n    if (!this.__activeQuestionDetails.isBonus) {\n      let unlockCheck = 0;\n      let unlockThreashold = 100;\n      let boardCol = 0;\n      for (var t in this._gameBoardFlat) {\n        // only count things that are disabled\n        if (\n          !this._gameBoardFlat[t].isBonus &&\n          this._gameBoardFlat[t].question.submitted &&\n          this._gameBoardFlat[t].points === this.__activeQuestionDetails.points\n        ) {\n          unlockCheck += this.__activeQuestionDetails.points;\n        }\n      }\n      switch (this.__activeQuestionDetails.points) {\n        case 1:\n          unlockThreashold = 16;\n          boardCol = 1;\n          break;\n        case 2:\n          unlockThreashold = 16;\n          boardCol = 5;\n          break;\n        case 3:\n          unlockThreashold = 12;\n          boardCol = 7;\n          break;\n      }\n      // unlock the bonus point question per level if the entire level is cleared\n      if (unlockCheck === unlockThreashold) {\n        this.shadowRoot\n          .querySelectorAll(\n            'responsive-grid-col paper-button[data-type=\"bonus\"][data-display-points=\"' +\n              this.__activeQuestionDetails.points +\n              '\"]'\n          )\n          .forEach(item => {\n            item.removeAttribute(\"disabled\");\n            let uuid = item.getAttribute(\"data-question-uuid\");\n            // bonus always last row, make data match the operation\n            this.gameBoard[boardCol].cols.find(\n              i => i.uuid == uuid\n            ).disabled = false;\n            // keep flat in sync\n            this._gameBoardFlat[uuid].disabled = false;\n          });\n      }\n    }\n    // test for completing an entire column so we need to activate a bonus chance\n    if (\n      this.points[this.__activeType].attempted == 11 &&\n      !this.__activeQuestionDetails.isBonus\n    ) {\n      // get last row\n      this.shadowRoot\n        .querySelectorAll(\n          'responsive-grid-col paper-button[data-is-bonus][data-type=\"' +\n            this.__activeType +\n            '\"]'\n        )\n        .forEach(item => {\n          item.removeAttribute(\"disabled\");\n          let uuid = item.getAttribute(\"data-question-uuid\");\n          // bonus always last row, make data match the operation\n          this.gameBoard[this.gameBoard.length - 1].cols.find(\n            i => i.uuid == uuid\n          ).disabled = false;\n          // keep flat in sync\n          this._gameBoardFlat[uuid].disabled = false;\n        });\n    }\n    // if current answer is correct\n    if (this.shadowRoot.querySelector(\"#question\").checkAnswers()) {\n      // show correct\n      const evt = new CustomEvent(\"simple-toast-show\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: {\n          text: \"Correct!\",\n          duration: 4000\n        }\n      });\n      this.dispatchEvent(evt);\n      // @todo need an area for placing feedback\n      // update the earned column\n      let num =\n        parseInt(this.points[this.__activeType].earned) +\n        parseInt(this.__activeValue);\n      this.set(\"points.\" + this.__activeType + \".earned\", num);\n      this.notifyPath(\"points.\" + this.__activeType + \".earned\");\n      // set icon to correct\n      icon.icon = \"icons:check-circle\";\n      icon.classList.add(\"correct\");\n      // update total column\n      total = parseInt(this.points.total.earned) + parseInt(this.__activeValue);\n      this.set(\"points.total.earned\", total);\n      this.notifyPath(\"points.total.earned\");\n    } else {\n      this.set(\"activeQuestion.wrong\", true);\n      // show wrong\n      const evt = new CustomEvent(\"simple-toast-show\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: {\n          text: \":( You got it wrong\",\n          duration: 4000\n        }\n      });\n      this.dispatchEvent(evt);\n      // @todo show feedback for wrong answer as to why\n      // set icon to incorrect\n      icon.icon = \"icons:cancel\";\n      icon.classList.add(\"incorrect\");\n    }\n    // update the percent for this column\n    let percent = (\n      (parseInt(this.points[this.__activeType].earned) /\n        parseInt(this.points[this.__activeType].attempted)) *\n      100\n    ).toFixed(1);\n    this.set(\"points.\" + this.__activeType + \".percent\", percent);\n    this.notifyPath(\"points.\" + this.__activeType + \".percent\");\n    // update the percent\n    total = (\n      (parseInt(this.points.total.earned) /\n        parseInt(this.points.total.attempted)) *\n      100\n    ).toFixed(1);\n    this.set(\"points.total.percent\", total);\n    this.notifyPath(\"points.total.percent\");\n    attemptsData[this.__activeType].series = [\n      this.points[this.__activeType].earned,\n      this.points[this.__activeType].attempted -\n        this.points[this.__activeType].earned\n    ];\n    // beyond edge case as bonus can make this negative\n    if (\n      this.points[this.__activeType].attempted <\n      this.points[this.__activeType].earned\n    ) {\n      attemptsData[this.__activeType].series = [\n        this.points[this.__activeType].earned,\n        0\n      ];\n    }\n    attemptsData.total.series = [\n      this.points.total.earned,\n      this.points.total.attempted - this.points.total.earned\n    ];\n    // beyond edge case as bonus can make this negative\n    if (this.points.total.attempted < this.points.total.earned) {\n      attemptsData.total.series = [this.points.total.earned, 0];\n    }\n    // update the charts\n    attemptsData.overall.series = [\n      this.points.slideid.attempted,\n      this.points.terminology.attempted,\n      this.points.reading.attempted,\n      this.points.lecture.attempted\n    ];\n    this.set(\"attemptsData\", {});\n    this.set(\"attemptsData\", attemptsData);\n    // append child via polymer so we can style it correctly in shadow dom\n    this.__activeTap.appendChild(icon);\n    // check for 2 points remaining\n    if (this.remainingAttempts === 2) {\n      this.shadowRoot\n        .querySelectorAll(\n          \"responsive-grid-col paper-button[data-value='3']:not([disabled]):not([data-is-bonus])\"\n        )\n        .forEach(item => {\n          item.setAttribute(\"disabled\", \"disabled\");\n        });\n    }\n    if (this.remainingAttempts === 1) {\n      this.shadowRoot\n        .querySelectorAll(\n          \"responsive-grid-col paper-button[data-value='2']:not([disabled]):not([data-is-bonus])\"\n        )\n        .forEach(item => {\n          item.setAttribute(\"disabled\", \"disabled\");\n        });\n      this.shadowRoot\n        .querySelectorAll(\n          'responsive-grid-col paper-button[data-value=\"3\"]:not([disabled]):not([data-is-bonus])'\n        )\n        .forEach(item => {\n          item.setAttribute(\"disabled\", \"disabled\");\n        });\n    }\n    // check for if we have any attempts remaining\n    if (this.remainingAttempts <= 0) {\n      this.shadowRoot\n        .querySelectorAll(\n          \"responsive-grid-col paper-button:not([disabled]):not([data-is-bonus])\"\n        )\n        .forEach(item => {\n          item.setAttribute(\"disabled\", \"disabled\");\n        });\n      this.remainingAttempts = 0;\n      // trap for bonus questions still being available\n      if (\n        this.shadowRoot.querySelectorAll(\n          \"responsive-grid-col paper-button[data-is-bonus]:not([disabled])\"\n        ).length === 0\n      ) {\n        // open score report in a modal now\n        this.shadowRoot.querySelector(\"#dialog\").toggle();\n        this.shadowRoot.querySelector(\"#scoreboard\").title =\n          \"Your final score for the game\";\n        this.scoreBoardToggle({});\n        const evt = new CustomEvent(\"simple-toast-show\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: {\n            text: \"Game over!\",\n            duration: 5000\n          }\n        });\n        this.dispatchEvent(evt);\n        // fire in case anyone else cares\n        this.dispatchEvent(\n          new CustomEvent(\"game-show-quiz-game-over\", {\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n            detail: {\n              game: this.title,\n              score: this.points.total.earned\n            }\n          })\n        );\n        // ship to backend if we have one\n        if (this.gameScoreBoardBackend) {\n          this.shadowRoot.querySelector(\"#gamebackend\").url = `${\n            this.gameScoreBoardBackend\n          }/${this.title}/${this.points.total.earned}?token=${this.token}`;\n          this.shadowRoot.querySelector(\"#gamebackend\").generateRequest();\n        }\n      }\n    }\n  }\n  /**\n   * Notice that something was tapped, resolve what it was.\n   */\n  _gameBoardTap(e) {\n    var local = e.target;\n    if (local.getAttribute(\"data-question-uuid\") != null) {\n      this.__submitDisabled = true;\n      this.__activeTap = local;\n      this.__activeType = local.getAttribute(\"data-type\");\n      this.__activeValue = local.getAttribute(\"data-value\");\n      let uuid = local.getAttribute(\"data-question-uuid\");\n      this.__activeQuestionDetails = this._gameBoardFlat[uuid];\n      // debug\n      //console.log(this.__activeQuestionDetails.question.data.find((currentValue, index, arr)=>{if(currentValue.correct){return currentValue;}}));\n      this.set(\"activeQuestion\", {});\n      this.set(\"activeQuestion\", this.__activeQuestionDetails.question);\n      this.notifyPath(\"activeQuestion.*\");\n      this.notifyPath(\"activeQuestion.data.*\");\n      // reset the layout on open\n      this.shadowRoot.querySelector(\"#col1\").style.flex = \"\";\n      this.shadowRoot.querySelector(\"#col2\").style.flex = \"\";\n      this.shadowRoot.querySelector(\"#question\").resetAnswers();\n      setTimeout(() => {\n        this.shadowRoot.querySelector(\"#dialog\").toggle();\n      }, 100);\n    }\n  }\n  /**\n   * Notice the game board has changed from the backend loading it most likely.\n   */\n  _gameBoardDataChanged(newValue, oldvalue) {\n    if (newValue) {\n      this._gameBoardFlat = {};\n      // @todo this needs to come in via settings some how\n      var gameBoard = [\n        {\n          cols: [\n            {\n              title: \"Slide id\",\n              points: \"\",\n              notRaised: true,\n              disabled: true\n            },\n            {\n              title: \"Terms\",\n              points: \"\",\n              notRaised: true,\n              disabled: true\n            },\n            {\n              title: \"Reading\",\n              points: \"\",\n              notRaised: true,\n              disabled: true\n            },\n            {\n              title: \"Lecture\",\n              points: \"\",\n              notRaised: true,\n              disabled: true\n            },\n            {\n              title: \"Bonus\",\n              points: \"\",\n              notRaised: true,\n              disabled: true\n            }\n          ]\n        }\n      ];\n      // row prototype\n      var row = {};\n      var gameData = Object.assign({}, newValue);\n      const keys = Object.keys(gameData);\n      var count = 0;\n      // we want 4 1 pt questions, 2 2pts, and 1 3 pts\n      var pointMap = {\n        1: 4,\n        2: 2,\n        3: 1,\n        bonus: 1\n      };\n      // 4 iterations for 1 points\n      for (var pointLevel in pointMap) {\n        count = 0;\n        while (count < pointMap[pointLevel]) {\n          count++;\n          // reset the row\n          row = {\n            cols: []\n          };\n          // loop over the keys coming in so we can build each row across\n          for (var type in keys) {\n            var level = gameData[keys[type]][pointLevel];\n            if (level && level.questions.length > 0) {\n              // get a random key based on what hasn't been used here previously\n              let qKey = Math.floor(Math.random() * level.questions.length);\n              var questionObject = {\n                uuid: this.generateUUID(),\n                type: level.type,\n                title: level.title,\n                points: level.points,\n                displayPoints: level.points,\n                isBonus: false,\n                question: Object.assign({}, level.questions[qKey])\n              };\n              // remove this record\n              gameData[keys[type]][pointLevel].questions.splice(qKey, 1);\n              if (keys[type] === \"bonus\") {\n                gameData[keys[type]][pointLevel].questions = [];\n                questionObject.disabled = true;\n                questionObject.isBonus = true;\n                questionObject.points = pointLevel;\n                questionObject.displayPoints = pointLevel;\n              } else if (pointLevel === \"bonus\") {\n                questionObject.disabled = true;\n                questionObject.isBonus = true;\n              }\n              row.cols.push(questionObject);\n              this._gameBoardFlat[questionObject.uuid] = questionObject;\n            }\n          }\n          gameBoard.push(row);\n        }\n      }\n      // this delay helps with updating the board after the fact\n      this.set(\"gameBoard\", []);\n      setTimeout(() => {\n        this.set(\"gameBoard\", gameBoard);\n        this.notifyPath(\"gameBoard.*\");\n      }, 100);\n    }\n  }\n  generateUUID() {\n    return \"item-sss-ss-ss\".replace(/s/g, this._uuidPart);\n  }\n  _uuidPart() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  /**\n   * Reset focus on close back to the help button\n   */\n  resetFocus(e) {\n    this.shadowRoot.querySelector(\"#helpbutton\").focus();\n  }\n  /**\n   * HAX bindings\n   */\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Game show\",\n        description: \"Tweak the game show options\",\n        icon: \"av:play-circle-filled\",\n        color: \"grey\",\n        groups: [\"Video\", \"Media\"],\n        handles: [\n          {\n            type: \"video\",\n            url: \"source\"\n          }\n        ],\n        meta: {\n          author: \"Your organization on github\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the game\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the game\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"gameData\",\n            title: \"Source of the game data data\",\n            description: \"The title of the game\",\n            inputMethod: \"textfield\",\n            icon: \"icons:link\"\n          }\n        ],\n        advanced: []\n      },\n      saveOptions: {\n        unsetAttributes: [\n          \"attempts-data\",\n          \"points\",\n          \"game-board\",\n          \"question-title\",\n          \"remaining-attempts\"\n        ]\n      }\n    };\n  }\n  /**\n   * Attached to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    setTimeout(() => {\n      // punch a basic hole for elms:ln to make life easier for IDs\n      if (\n        window.Drupal &&\n        window.Drupal.settings &&\n        window.Drupal.settings.elmslnCore &&\n        window.Drupal.settings.elmslnCore.uname\n      ) {\n        this.gameScoreBoardBackend =\n          window.Drupal.settings.basePath +\n          \"apps/game-show-scoreboard/save-score\";\n        this.token = btoa(window.Drupal.settings.elmslnCore.uname);\n        this.gameDirectionsData =\n          window.Drupal.settings.basePath +\n          \"apps/game-show-scoreboard/load-directions\";\n      }\n      this.shadowRoot\n        .querySelector(\"#dismiss\")\n        .addEventListener(\"click\", this.resetFocus.bind(this));\n      this.shadowRoot\n        .querySelector(\"#contentcontainer\")\n        .addEventListener(\"click\", this._gameBoardTap.bind(this));\n      this.shadowRoot\n        .querySelector(\"#submit\")\n        .addEventListener(\"click\", this.submitAnswer.bind(this));\n      this.shadowRoot\n        .querySelector(\"#continue\")\n        .addEventListener(\"click\", this.continueGameTap.bind(this));\n      this.shadowRoot\n        .querySelector(\"#question\")\n        .addEventListener(\"click\", this.registerTap.bind(this));\n    }, 0);\n  }\n  /**\n   * detached life cycke\n   */\n  disconnectedCallback() {\n    this.shadowRoot\n      .querySelector(\"#dismiss\")\n      .removeEventListener(\"click\", this.resetFocus.bind(this));\n    this.shadowRoot\n      .querySelector(\"#contentcontainer\")\n      .removeEventListener(\"click\", this._gameBoardTap.bind(this));\n    this.shadowRoot\n      .querySelector(\"#submit\")\n      .removeEventListener(\"click\", this.submitAnswer.bind(this));\n    this.shadowRoot\n      .querySelector(\"#continue\")\n      .removeEventListener(\"click\", this.continueGameTap.bind(this));\n    this.shadowRoot\n      .querySelector(\"#question\")\n      .removeEventListener(\"click\", this.registerTap.bind(this));\n    super.disconnectedCallback();\n  }\n}\nwindow.customElements.define(GameShowQuiz.tag, GameShowQuiz);\nexport { GameShowQuiz };\n"],"names":["GameShowQuizModal","LitElement","css","title","type","String","html","this","shadowRoot","querySelector","toggle","setTimeout","evt","document","createEvent","initUIEvent","window","dispatchEvent","customElements","define","tag","GameShowQuiz","SimpleToast","requestAvailability","MutableData","PolymerElement","newValue","wipeSlot","div","createElement","style","innerHTML","appendChild","cloneNode","e","_typeof","__activeTap","parentNode","nextElementSibling","firstElementChild","focus","found","i","answers","userGuess","__submitDisabled","attemptsData","set","notifyPath","disabled","icon","classList","add","total","__activeType","__activeQuestionDetails","isBonus","num","parseInt","points","attempted","__activeValue","remainingAttempts","unlockCheck","unlockThreashold","boardCol","t","_gameBoardFlat","question","submitted","querySelectorAll","forEach","item","removeAttribute","uuid","getAttribute","_this2","gameBoard","cols","find","length","checkAnswers","CustomEvent","bubbles","cancelable","composed","detail","text","duration","earned","percent","toFixed","series","overall","slideid","terminology","reading","lecture","setAttribute","scoreBoardToggle","game","score","gameScoreBoardBackend","url","token","generateRequest","local","target","flex","resetAnswers","_this3","oldvalue","notRaised","row","gameData","Object","assign","keys","count","pointMap","bonus","pointLevel","level","questions","qKey","Math","floor","random","questionObject","generateUUID","displayPoints","splice","push","_this4","replace","_uuidPart","toString","substring","Drupal","settings","elmslnCore","uname","_this5","basePath","btoa","gameDirectionsData","addEventListener","resetFocus","bind","_gameBoardTap","submitAnswer","continueGameTap","registerTap","removeEventListener","gameDirections","observer","value","labels","Number","directionsTitle","questionTitle","Array","gameBoardData","activeQuestion","canScale","canPosition","canEditSource","gizmo","description","color","groups","handles","meta","author","quick","property","inputMethod","configure","advanced","saveOptions","unsetAttributes"],"mappings":"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"}