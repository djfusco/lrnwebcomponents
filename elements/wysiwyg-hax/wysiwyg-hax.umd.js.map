{"version":3,"file":"wysiwyg-hax.umd.js","sources":["wysiwyg-hax.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport \"@lrnwebcomponents/cms-hax/cms-hax.js\";\n/**\n * `wysiwyg-hax`\n * `Integration of wysiwyg edit form for a page with HAX.`\n * @demo demo/index.html\n * @element wysiwyg-hax\n */\nclass WysiwygHax extends LitElement {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n      `\n    ];\n  }\n  render() {\n    return html`\n      <textarea\n        class=\"${this.fieldClass}\"\n        id=\"${this.fieldId}\"\n        name=\"${this.fieldName}\"\n        hidden=\"\"\n      >\n      ${this.bodyValue}\n      </textarea\n      >\n      <cms-hax\n        hide-message=\"\"\n        redirect-location=\"${this.redirectLocation}\"\n        update-page-data=\"${this.updatePageData}\"\n        .end-point=\"${this.endPoint}\"\n        app-store-connection=\"${this.appStoreConnection}\"\n        offset-margin=\"${this.offsetMargin}\"\n        ?open-default=\"${this.openDefault}\"\n        ?sync-body=\"${this.syncBody}\"\n        ?hide-panel-ops=\"${this.hidePanelOps}\"\n        ?hide-preferences-button=\"${this.hidePreferencesButton}\"\n        element-align=\"${this.elementAlign}\"\n      >\n      </cms-hax>\n    `;\n  }\n\n  static get tag() {\n    return \"wysiwyg-hax\";\n  }\n  constructor() {\n    super();\n    // import child nodes before things start deleting whats in there\n    let children = this.querySelector(\"template\");\n    if (children) {\n      this.__importContent = children.innerHTML;\n    }\n    this.openDefault = false;\n    this.elementAlign = \"right\";\n    this.fieldId = \"textarea-input-field\";\n    this.fieldName = \"data[content]\";\n    this.endPoint = null;\n    this.__imported = false;\n    this.redirectLocation = \"\";\n    this.updatePageData = \"\";\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"activeHaxBody\") {\n        this._activeHaxBodyUpdated(this[propName]);\n      }\n      if (propName == \"saveButtonSelector\" && this[propName].tagName) {\n        this.saveButtonSelector.addEventListener(\n          \"click\",\n          this.__saveClicked.bind(this)\n        );\n      }\n    });\n  }\n  static get properties() {\n    return {\n      /**\n       * Default the panel to open\n       */\n      openDefault: {\n        type: Boolean,\n        attribute: \"open-default\"\n      },\n      redirectLocation: {\n        type: String,\n        attribute: \"redirect-location\"\n      },\n      /**\n       * Hide the panel operations (save and cancel),\n       */\n      hidePanelOps: {\n        type: Boolean,\n        attribute: \"hide-panel-ops\"\n      },\n      /**\n       * Hide preferences button\n       */\n      hidePreferencesButton: {\n        type: Boolean,\n        attribute: \"hide-preferences-button\"\n      },\n      /**\n       * Direction to align the hax edit panel\n       */\n      elementAlign: {\n        type: String,\n        attribute: \"element-align\"\n      },\n      offsetMargin: {\n        type: String,\n        attribute: \"offset-margin\"\n      },\n      /**\n       * Data binding of a hidden text area with the value from the hax-body tag\n       */\n      bodyValue: {\n        type: String,\n        attribute: \"body-value\"\n      },\n      /**\n       * Connection object for talking to an app store.\n       */\n      appStoreConnection: {\n        type: String,\n        attribute: \"app-store-connection\"\n      },\n      /**\n       * Object reference that will get clicked on\n       */\n      saveButtonSelector: {\n        type: Object\n      },\n      /**\n       * class on the field\n       */\n      fieldClass: {\n        type: String,\n        attribute: \"field-class\"\n      },\n      /**\n       * fieldId, id value on the input field.\n       */\n      fieldId: {\n        type: String,\n        attribute: \"field-id\"\n      },\n      /**\n       * fieldName, internal to the form in whatever system it's in.\n       */\n      fieldName: {\n        type: String,\n        attribute: \"field-name\"\n      },\n      syncBody: {\n        type: Boolean,\n        attribute: \"sync-body\",\n        reflect: true\n      },\n      /**\n       * State of the panel\n       */\n      editMode: {\n        type: Boolean,\n        reflect: true,\n        attribute: \"edit-mode\"\n      },\n      /**\n       * Location to save content to.\n       */\n      endPoint: {\n        type: String,\n        attribute: \"end-point\"\n      },\n      /**\n       * Page data, body of text as a string.\n       */\n      updatePageData: {\n        type: String,\n        attribute: \"update-page-data\"\n      },\n      /**\n       * Reference to activeBody.\n       */\n      activeHaxBody: {\n        type: Object\n      },\n      __imported: {\n        type: Boolean\n      }\n    };\n  }\n  createRenderRoot() {\n    return this;\n  }\n  /**\n   * Ensure we've imported our content on initial setup\n   */\n  _activeHaxBodyUpdated(newValue) {\n    // ensure we import our content once we get an initial registration of active body\n    if (newValue != null && !this.__imported) {\n      this.__imported = true;\n      if (this.__importContent) {\n        newValue.importContent(this.__importContent);\n      }\n    }\n  }\n  /**\n   * HTMLElement\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"hax-save\", this._bodyContentUpdated.bind(this));\n    window.addEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n  }\n  /**\n   * HTMLElement\n   */\n  disconnectedCallback() {\n    window.removeEventListener(\"hax-save\", this._bodyContentUpdated.bind(this));\n    window.removeEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n    if (this.saveButtonSelector && this.saveButtonSelector.tagName) {\n      this.saveButtonSelector.removeEventListener(\n        \"click\",\n        this.__saveClicked.bind(this)\n      );\n    }\n    super.disconnectedCallback();\n  }\n  __saveClicked(e) {\n    // will attempt to set this right before save goes out the door\n    this.bodyValue = window.HaxStore.instance.activeHaxBody.haxToContent();\n  }\n  /**\n   * Store updated, sync.\n   */\n  _haxStorePropertyUpdated(e) {\n    if (\n      e.detail &&\n      typeof e.detail.value !== typeof undefined &&\n      e.detail.property\n    ) {\n      if (typeof e.detail.value === \"object\") {\n        this[e.detail.property] = null;\n      }\n      this[e.detail.property] = e.detail.value;\n    }\n  }\n\n  /**\n   * Set the bubbled up event to the body value that just got changed\n   */\n  _bodyContentUpdated(e) {\n    this.bodyValue = window.HaxStore.instance.activeHaxBody.haxToContent();\n    setTimeout(() => {\n      if (this.saveButtonSelector) {\n        this.saveButtonSelector.click();\n      }\n    }, 100);\n  }\n}\nwindow.customElements.define(WysiwygHax.tag, WysiwygHax);\nexport { WysiwygHax };\n"],"names":["WysiwygHax","children","querySelector","__importContent","innerHTML","openDefault","elementAlign","fieldId","fieldName","endPoint","__imported","redirectLocation","updatePageData","LitElement","html","this","fieldClass","bodyValue","appStoreConnection","offsetMargin","syncBody","hidePanelOps","hidePreferencesButton","css","changedProperties","forEach","oldValue","propName","_this2","_activeHaxBodyUpdated","tagName","saveButtonSelector","addEventListener","__saveClicked","bind","newValue","importContent","window","_bodyContentUpdated","_haxStorePropertyUpdated","removeEventListener","e","HaxStore","instance","activeHaxBody","haxToContent","detail","_typeof","value","property","setTimeout","_this3","click","type","Boolean","attribute","String","Object","reflect","editMode","customElements","define","tag"],"mappings":"uzEAQMA,2IA+CEC,8BAAgBC,cAAc,mBAC9BD,MACGE,gBAAkBF,EAASG,aAE7BC,aAAc,IACdC,aAAe,UACfC,QAAU,yBACVC,UAAY,kBACZC,SAAW,OACXC,YAAa,IACbC,iBAAmB,KACnBC,eAAiB,iPA1DDC,yDAcdC,WAEMC,KAAKC,WACRD,KAAKR,QACHQ,KAAKP,UAGbO,KAAKE,UAKgBF,KAAKJ,iBACNI,KAAKH,eACXG,KAAKN,SACKM,KAAKG,mBACZH,KAAKI,aACLJ,KAAKV,YACRU,KAAKK,SACAL,KAAKM,aACIN,KAAKO,sBAChBP,KAAKT,qDA9BnB,CACLiB,8CAoCK,qDAkBDC,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,GACnB,iBAAZA,GACFC,EAAKC,sBAAsBD,EAAKD,IAElB,sBAAZA,GAAoCC,EAAKD,GAAUG,SACrDF,EAAKG,mBAAmBC,iBACtB,QACAJ,EAAKK,cAAcC,KAAKN,wDA2HvBb,mDAKaoB,GAEJ,MAAZA,GAAqBpB,KAAKL,kBACvBA,YAAa,EACdK,KAAKZ,iBACPgC,EAASC,cAAcrB,KAAKZ,oHAShCkC,OAAOL,iBAAiB,WAAYjB,KAAKuB,oBAAoBJ,KAAKnB,OAClEsB,OAAOL,iBACL,6BACAjB,KAAKwB,yBAAyBL,KAAKnB,sDAOrCsB,OAAOG,oBAAoB,WAAYzB,KAAKuB,oBAAoBJ,KAAKnB,OACrEsB,OAAOG,oBACL,6BACAzB,KAAKwB,yBAAyBL,KAAKnB,OAEjCA,KAAKgB,oBAAsBhB,KAAKgB,mBAAmBD,cAChDC,mBAAmBS,oBACtB,QACAzB,KAAKkB,cAAcC,KAAKnB,sGAKhB0B,QAEPxB,UAAYoB,OAAOK,SAASC,SAASC,cAAcC,gEAKjCJ,GAErBA,EAAEK,sBACFC,EAAON,EAAEK,OAAOE,QAChBP,EAAEK,OAAOG,WAEqB,WAA1BF,EAAON,EAAEK,OAAOE,cACbP,EAAEK,OAAOG,UAAY,WAEvBR,EAAEK,OAAOG,UAAYR,EAAEK,OAAOE,mDAOnBP,mBACbxB,UAAYoB,OAAOK,SAASC,SAASC,cAAcC,eACxDK,WAAW,WACLC,EAAKpB,oBACPoB,EAAKpB,mBAAmBqB,SAEzB,gDA5LI,CAIL/C,YAAa,CACXgD,KAAMC,QACNC,UAAW,gBAEb5C,iBAAkB,CAChB0C,KAAMG,OACND,UAAW,qBAKblC,aAAc,CACZgC,KAAMC,QACNC,UAAW,kBAKbjC,sBAAuB,CACrB+B,KAAMC,QACNC,UAAW,2BAKbjD,aAAc,CACZ+C,KAAMG,OACND,UAAW,iBAEbpC,aAAc,CACZkC,KAAMG,OACND,UAAW,iBAKbtC,UAAW,CACToC,KAAMG,OACND,UAAW,cAKbrC,mBAAoB,CAClBmC,KAAMG,OACND,UAAW,wBAKbxB,mBAAoB,CAClBsB,KAAMI,QAKRzC,WAAY,CACVqC,KAAMG,OACND,UAAW,eAKbhD,QAAS,CACP8C,KAAMG,OACND,UAAW,YAKb/C,UAAW,CACT6C,KAAMG,OACND,UAAW,cAEbnC,SAAU,CACRiC,KAAMC,QACNC,UAAW,YACXG,SAAS,GAKXC,SAAU,CACRN,KAAMC,QACNI,SAAS,EACTH,UAAW,aAKb9C,SAAU,CACR4C,KAAMG,OACND,UAAW,aAKb3C,eAAgB,CACdyC,KAAMG,OACND,UAAW,oBAKbX,cAAe,CACbS,KAAMI,QAER/C,WAAY,CACV2C,KAAMC,mBA+EdjB,OAAOuB,eAAeC,OAAO7D,EAAW8D,IAAK9D"}